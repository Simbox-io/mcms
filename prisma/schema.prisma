// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String         @id @default(uuid())
  username             String         @unique
  email                String         @unique
  passwordHash         String
  firstName            String?
  lastName             String?
  avatar               String?
  bio                  String?
  role                 Role           @default(USER)
  posts                Post[]
  comments             Comment[]
  files                File[]
  ownedProjects        Project[]      @relation("Owned by")
  memberProjects       Project[]      @relation("Member of")
  followedBy           User[]         @relation("UserFollows")
  following            User[]         @relation("UserFollows")
  permissions          Permission[]   @relation("UserPermissions")
  grantedPermissions   Permission[]   @relation("GrantedPermissions")
  likedPosts           Post[]         @relation("LikedPosts")
  likedComments        Comment[]      @relation("LikedComments")
  likedFiles           File[]         @relation("LikedFiles")
  likedProjects        Project[]      @relation("LikedProjects")
  likedSpaces          Space[]        @relation("LikedSpaces")
  likedPages           Page[]         @relation("LikedPages")
  likedTags            Tag[]          @relation("LikedTags")
  followedPosts        Post[]         @relation("FollowedPosts")
  followedProjects     Project[]      @relation("FollowedProjects")
  followedSpaces       Space[]        @relation("FollowedSpaces")
  followedTags         Tag[]          @relation("FollowedTags")
  spaces               Space[]
  viewedSpaces         SpaceView[]
  notifications        Notification[]
  activities           Activity[]
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  profile              Profile?
  points               Int            @default(0)
  badges               Badge[]
  level                Int            @default(1)
  receiveNotifications Boolean        @default(true)
  receiveUpdates       Boolean        @default(true)
}

model Profile {
  id                Int                @id @default(autoincrement())
  user              User               @relation(fields: [userId], references: [id])
  userId            String             @unique
  bio               String?
  location          String?
  website           String?
  socialLinks       SocialLink[]
  skills            Skill[]
  gamificationStats GamificationStats?
}

model SocialLink {
  id        Int     @id @default(autoincrement())
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int
  platform  String // e.g. 'twitter', 'github', 'linkedin'
  url       String
}

model Skill {
  id        Int     @id @default(autoincrement())
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int
  name      String
}

model GamificationStats {
  id        Int     @id @default(autoincrement())
  profile   Profile @relation(fields: [profileId], references: [id])
  profileId Int     @unique
  points    Int     @default(0)
  level     Int     @default(1)
  badges    Badge[]
}

model Badge {
  id                  Int               @id @default(autoincrement())
  gamificationStats   GamificationStats @relation(fields: [gamificationStatsId], references: [id])
  gamificationStatsId Int
  name                String
  description         String
  earnedAt            DateTime          @default(now())
  userId              String?
  User                User?             @relation(fields: [userId], references: [id])
}

model Post {
  id          Int       @id @default(autoincrement())
  title       String
  content     String    @db.Text
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  tags        Tag[]
  comments    Comment[]
  likes       Int       @default(0)
  views       Int       @default(0)
  isFeatured  Boolean   @default(false)
  isPinned    Boolean   @default(false)
  likedBy     User[]    @relation("LikedPosts")
  followedBy  User[]    @relation("FollowedPosts")
  forum       Boolean   @default(false)
  isPublished Boolean   @default(false)
  publishedAt DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.Text
  post      Post     @relation(fields: [postId], references: [id])
  postId    Int
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likedBy   User[]   @relation("LikedComments")
}

model File {
  id           Int      @id @default(autoincrement())
  name         String
  url          String
  description  String?
  isPublic     Boolean  @default(false)
  project      Project? @relation(fields: [projectId], references: [id])
  projectId    Int?
  uploadedBy   User     @relation(fields: [uploadedById], references: [id])
  uploadedById String
  tags         Tag[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  likedBy      User[]   @relation("LikedFiles")
}

model Project {
  id          Int      @id @default(autoincrement())
  ownerId     String
  name        String
  description String?
  repository  String? // URL to external repo
  image       String?
  owner       User     @relation("Owned by", fields: [ownerId], references: [id])
  files       File[]
  members     User[]   @relation("Member of")
  spaces      Space[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  likedBy     User[]   @relation("LikedProjects")
  followedBy  User[]   @relation("FollowedProjects")
}

model Tag {
  id         Int    @id @default(autoincrement())
  name       String
  posts      Post[]
  files      File[]
  likedBy    User[] @relation("LikedTags")
  followedBy User[] @relation("FollowedTags")
}

model Notification {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  message   String
  link      String?
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Activity {
  id        Int      @id @default(autoincrement())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String // e.g. 'post', 'comment', 'file', 'follow'
  message   String
  itemId    Int
  createdAt DateTime @default(now())
}

model Permission {
  id          Int      @id @default(autoincrement())
  user        User     @relation("UserPermissions", fields: [userId], references: [id])
  userId      String
  resource    String // e.g. 'post', 'file', 'project'
  action      String // e.g. 'create', 'read', 'update', 'delete'
  grantedBy   User     @relation("GrantedPermissions", fields: [grantedById], references: [id])
  grantedById String
  grantedAt   DateTime @default(now())
}

model AdminSettings {
  id                  Int      @id @default(autoincrement())
  siteTitle           String
  siteDescription     String
  logo                String?
  accentColor         String   @default("#4B5563")
  customCSS           String?
  customJS            String?
  emailDigestSubject  String?
  emailSignature      String?
  emailProvider       String   @default("smtp")
  fileStorageProvider String   @default("local")
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
}

model Image {
  id          Int      @id @default(autoincrement())
  fileName    String   @unique
  url         String
  contentType String
  data        Bytes
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Plugin {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  version     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Space {
  id          Int         @id @default(autoincrement())
  title       String
  description String?
  content     String?
  author      User        @relation(fields: [authorId], references: [id])
  authorId    String
  project     Project?    @relation(fields: [projectId], references: [id])
  projectId   Int?
  pages       Page[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  views       SpaceView[]
  likedBy     User[]      @relation("LikedSpaces")
  followedBy  User[]      @relation("FollowedSpaces")
}

model Page {
  id        Int      @id @default(autoincrement())
  title     String
  content   String
  space     Space    @relation(fields: [spaceId], references: [id])
  spaceId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  likedBy   User[]   @relation("LikedPages")
}

model SpaceView {
  id       Int      @id @default(autoincrement())
  space    Space    @relation(fields: [spaceId], references: [id])
  spaceId  Int
  user     User     @relation(fields: [userId], references: [id])
  userId   String
  viewedAt DateTime @default(now())
}

enum Role {
  ADMIN
  MODERATOR
  USER
}
