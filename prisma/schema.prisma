generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model admin_settings {
  id                         Int       @id @default(autoincrement())
  site_title                 String    @db.VarChar(255)
  site_description           String
  logo                       String?
  accent_color               String    @db.VarChar(10)
  file_storage_provider      String?   @default("local") @db.VarChar(50)
  s3_access_key              String?   @db.VarChar(255)
  s3_secret_key              String?   @db.VarChar(255)
  s3_bucket_name             String?   @db.VarChar(255)
  s3_region                  String?   @db.VarChar(50)
  ftp_host                   String?   @db.VarChar(255)
  ftp_user                   String?   @db.VarChar(255)
  ftp_password               String?   @db.VarChar(255)
  ftp_directory              String?   @db.VarChar(255)
  email_digest_subject       String?   @db.VarChar(255)
  email_signature            String?
  max_file_size              Int
  allowed_file_types         String[]  @db.VarChar(255)
  require_email_verification Boolean?  @default(false)
  require_account_approval   Boolean?  @default(false)
  enable_user_registration   Boolean?  @default(true)
  require_login_to_download  Boolean?  @default(false)
  auto_delete_files          Boolean?  @default(false)
  file_expiration_period     Int?      @default(30)
  enable_versioning          Boolean?  @default(false)
  email_provider             String    @db.VarChar(50)
  smtp_host                  String?   @db.VarChar(255)
  smtp_port                  Int?
  smtp_secure                Boolean?
  smtp_auth_user             String?   @db.VarChar(255)
  smtp_auth_pass             String?   @db.VarChar(255)
  ses_region                 String?   @db.VarChar(50)
  ses_access_key             String?   @db.VarChar(255)
  ses_secret_access_key      String?   @db.VarChar(255)
  email_from                 String?   @db.VarChar(255)
  footer_text                String?
  copyright_text             String?
  database_type              String    @db.VarChar(50)
  database_url               String    @db.VarChar(500)
  created_at                 DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                 DateTime? @default(now()) @db.Timestamptz(6)
}

model category {
  id             String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String     @db.VarChar(100)
  slug           String     @unique @db.VarChar(150)
  description    String?
  parent_id      String?    @db.Uuid
  created_at     DateTime?  @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?  @default(now()) @db.Timestamptz(6)
  category       category?  @relation("categoryTocategory", fields: [parent_id], references: [id], onUpdate: NoAction)
  other_category category[] @relation("categoryTocategory")
  post           post[]
}

model comment {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  content       String
  author_id     String    @db.Uuid
  post_id       String?   @db.Uuid
  parent_id     String?   @db.Uuid
  is_approved   Boolean?  @default(true)
  likes         Int?      @default(0)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)
  user          user      @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  comment       comment?  @relation("commentTocomment", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_comment comment[] @relation("commentTocomment")
  post          post?     @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([post_id], map: "idx_comment_post_id")
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model file {
  id               String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name             String      @db.VarChar(255)
  description      String?
  filepath         String      @db.VarChar(500)
  mimetype         String      @db.VarChar(100)
  size             BigInt
  user_id          String?     @db.Uuid
  is_public        Boolean?    @default(false)
  download_count   Int?        @default(0)
  expiration_date  DateTime?   @db.Timestamptz(6)
  metadata         Json?       @default("{}")
  storage_provider String?     @default("local") @db.VarChar(50)
  external_url     String?     @db.VarChar(500)
  created_at       DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?   @default(now()) @db.Timestamptz(6)
  user             user?       @relation(fields: [user_id], references: [id], onUpdate: NoAction)
  file_tags        file_tags[]

  @@index([user_id], map: "idx_file_user_id")
}

model file_settings {
  id                        Int       @id @default(autoincrement())
  max_file_size             Int       @default(10)
  allowed_file_types        String[]  @default([".jpg", ".png", ".pdf", ".doc", ".docx"]) @db.VarChar(255)
  storage_provider          String?   @default("local") @db.VarChar(50)
  require_login_to_download Boolean?  @default(false)
  created_at                DateTime? @default(now()) @db.Timestamptz(6)
  updated_at                DateTime? @default(now()) @db.Timestamptz(6)
}

model file_tags {
  file_id    String    @db.Uuid
  tag_id     String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  file       file      @relation(fields: [file_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tag        tag       @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([file_id, tag_id])
}

model module_config {
  id            String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name          String    @db.VarChar(100)
  slug          String    @unique @db.VarChar(100)
  description   String?
  is_enabled    Boolean?  @default(true)
  icon          String?   @db.VarChar(50)
  admin_route   String?   @db.VarChar(255)
  display_order Int?      @default(0)
  settings      Json?     @default("{}")
  permissions   Json?     @default("{}")
  required_role String?   @db.VarChar(50)
  created_at    DateTime? @default(now()) @db.Timestamptz(6)
  updated_at    DateTime? @default(now()) @db.Timestamptz(6)

  @@index([slug], map: "idx_module_config_slug")
}

model navigation_item {
  id                    String                @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title                 String                @db.VarChar(100)
  url                   String?               @db.VarChar(500)
  icon                  String?               @db.VarChar(50)
  item_type             navigation_item_type? @default(LINK)
  order                 Int?                  @default(0)
  parent_id             String?               @db.Uuid
  menu_id               String                @db.Uuid
  target_module         String?               @db.VarChar(100)
  is_enabled            Boolean?              @default(true)
  open_in_new_tab       Boolean?              @default(false)
  requires_auth         Boolean?              @default(false)
  created_at            DateTime?             @default(now()) @db.Timestamptz(6)
  updated_at            DateTime?             @default(now()) @db.Timestamptz(6)
  navigation_menu       navigation_menu       @relation(fields: [menu_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  navigation_item       navigation_item?      @relation("navigation_itemTonavigation_item", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  other_navigation_item navigation_item[]     @relation("navigation_itemTonavigation_item")

  @@index([menu_id], map: "idx_navigation_item_menu_id")
}

model navigation_menu {
  id              String            @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name            String            @db.VarChar(100)
  description     String?
  location        String            @db.VarChar(100)
  created_at      DateTime?         @default(now()) @db.Timestamptz(6)
  updated_at      DateTime?         @default(now()) @db.Timestamptz(6)
  navigation_item navigation_item[]
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model post {
  id               String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title            String      @db.VarChar(255)
  slug             String      @unique @db.VarChar(300)
  content          String
  excerpt          String?
  featured_image   String?
  author_id        String      @db.Uuid
  category_id      String?     @db.Uuid
  status           String?     @default("draft") @db.VarChar(20)
  visibility       String?     @default("public") @db.VarChar(20)
  published_at     DateTime?   @db.Timestamptz(6)
  is_featured      Boolean?    @default(false)
  allow_comments   Boolean?    @default(true)
  views            Int?        @default(0)
  likes            Int?        @default(0)
  settings         Json?       @default("{}")
  meta_title       String?     @db.VarChar(255)
  meta_description String?
  created_at       DateTime?   @default(now()) @db.Timestamptz(6)
  updated_at       DateTime?   @default(now()) @db.Timestamptz(6)
  comment          comment[]
  user             user        @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  category         category?   @relation(fields: [category_id], references: [id], onUpdate: NoAction)
  post_tags        post_tags[]

  @@index([author_id], map: "idx_post_author_id")
  @@index([slug], map: "idx_post_slug")
}

model post_tags {
  post_id    String    @db.Uuid
  tag_id     String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  post       post      @relation(fields: [post_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tag        tag       @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([post_id, tag_id])
}

/// This model contains an expression index which requires additional setup for migrations. Visit https://pris.ly/d/expression-indexes for more info.
model project {
  id             String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name           String         @db.VarChar(255)
  slug           String         @unique @db.VarChar(300)
  description    String?
  readme         String?
  owner_id       String         @db.Uuid
  visibility     String?        @default("private") @db.VarChar(20)
  status         String?        @default("active") @db.VarChar(20)
  star_count     Int?           @default(0)
  fork_count     Int?           @default(0)
  forked_from_id String?        @db.Uuid
  default_branch String?        @default("main") @db.VarChar(100)
  settings       Json?          @default("{}")
  created_at     DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at     DateTime?      @default(now()) @db.Timestamptz(6)
  project        project?       @relation("projectToproject", fields: [forked_from_id], references: [id], onUpdate: NoAction)
  other_project  project[]      @relation("projectToproject")
  user           user           @relation(fields: [owner_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  project_tags   project_tags[]

  @@index([owner_id], map: "idx_project_owner_id")
  @@index([slug], map: "idx_project_slug")
}

model project_tags {
  project_id String    @db.Uuid
  tag_id     String    @db.Uuid
  created_at DateTime? @default(now()) @db.Timestamptz(6)
  project    project   @relation(fields: [project_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  tag        tag       @relation(fields: [tag_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([project_id, tag_id])
}

model tag {
  id           String         @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name         String         @unique @db.VarChar(100)
  created_at   DateTime?      @default(now()) @db.Timestamptz(6)
  updated_at   DateTime?      @default(now()) @db.Timestamptz(6)
  file_tags    file_tags[]
  post_tags    post_tags[]
  project_tags project_tags[]
}

model user {
  id                       String          @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username                 String          @unique @db.VarChar(50)
  email                    String          @unique @db.VarChar(100)
  password_hash            String          @db.VarChar(255)
  first_name               String?         @db.VarChar(50)
  last_name                String?         @db.VarChar(50)
  avatar                   String?
  bio                      String?
  job_title                String?         @db.VarChar(100)
  company                  String?         @db.VarChar(100)
  website                  String?         @db.VarChar(255)
  location                 String?         @db.VarChar(100)
  social_links             Json?           @default("{}")
  email_verified           Boolean?        @default(false)
  is_active                Boolean?        @default(true)
  is_deleted               Boolean?        @default(false)
  last_login               DateTime?       @db.Timestamptz(6)
  role                     user_role_enum? @default(USER)
  reset_token              String?         @db.VarChar(255)
  reset_token_expires      DateTime?       @db.Timestamptz(6)
  notification_preferences Json?           @default("{}")
  theme_preference         String?         @default("system") @db.VarChar(50)
  created_at               DateTime?       @default(now()) @db.Timestamptz(6)
  updated_at               DateTime?       @default(now()) @db.Timestamptz(6)
  comment                  comment[]
  file                     file[]
  post                     post[]
  project                  project[]
}

model user_role {
  id          String    @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name        String    @unique @db.VarChar(50)
  description String?
  permissions Json
  created_at  DateTime? @default(now()) @db.Timestamptz(6)
  updated_at  DateTime? @default(now()) @db.Timestamptz(6)
}

enum navigation_item_type {
  LINK
  DROPDOWN
  HEADING
  DIVIDER
}

enum user_role_enum {
  ADMIN
  EDITOR
  MODERATOR
  USER
  GUEST
}
