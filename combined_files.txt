// components/FormGroup.tsx
import React from 'react';

interface FormGroupProps {
  label?: string;
  children: React.ReactNode;
  htmlFor?: string;
  className?: string;
  error?: string;
  description?: string;
}

const FormGroup: React.FC<FormGroupProps> = ({
  label,
  children,
  htmlFor,
  className = '',
  error,
  description,
}) => {
  return (
    <div className={`mb-4 ${className}`}>
      <label htmlFor={htmlFor} className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
        {label}
      </label>
      {children}
      {description && <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">{description}</p>}
      {error && <p className="mt-1 text-sm text-red-600 dark:text-red-500">{error}</p>}
    </div>
  );
};

export default FormGroup;
// components/NavigationMenu.tsx
'use client';
import React, { useState } from 'react';
import Link from 'next/link';
import { usePathname } from 'next/navigation';
import { motion, AnimatePresence } from 'framer-motion';

interface NavigationItem {
  label: string;
  href: string;
}

interface NavigationMenuProps {
  items: NavigationItem[];
  className?: string;
}

const NavigationMenu: React.FC<NavigationMenuProps> = ({
  items,
  className = '',
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const pathname = usePathname();

  const toggleMenu = () => {
    setIsOpen(!isOpen);
  };

  return (
    <nav className={`relative ${className}`}>
      <button
        className="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300 focus:outline-none"
        onClick={toggleMenu}
        aria-label="Toggle navigation menu"
      >
        <svg
          xmlns="http://www.w3.org/2000/svg"
          fill="none"
          viewBox="0 0 24 24"
          stroke="currentColor"
          className="h-6 w-6"
        >
          {isOpen ? (
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M6 18L18 6M6 6l12 12"
            />
          ) : (
            <path
              strokeLinecap="round"
              strokeLinejoin="round"
              strokeWidth={2}
              d="M4 6h16M4 12h16M4 18h16"
            />
          )}
        </svg>
      </button>
      <AnimatePresence>
        {isOpen && (
          <motion.ul
            className="absolute right-0 mt-2 py-2 w-48 bg-white dark:bg-gray-800 rounded-md shadow-lg z-10"
            initial={{ opacity: 0, y: -20 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -20 }}
            transition={{ duration: 0.2 }}
          >
            {items.map((item) => (
              <li key={item.href}>
                <Link href={item.href}>
                  <a
                    className={`block px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 ${
                      pathname === item.href ? 'bg-gray-100 dark:bg-gray-700' : ''
                    }`}
                  >
                    {item.label}
                  </a>
                </Link>
              </li>
            ))}
          </motion.ul>
        )}
      </AnimatePresence>
    </nav>
  );
};

export default NavigationMenu;
// components/RecentlyViewedSpaces.tsx
import React, { useEffect, useState } from 'react';
import SpaceCard from '@/components/SpaceCard';
import EmptyState from '@/components/EmptyState';
import Spinner from '@/components/Spinner';
import  { Space } from '@/lib/prisma';

interface RecentlyViewedSpacesProps {
    onSpaceClick: (spaceId: number) => void;
}

const RecentlyViewedSpaces: React.FC<RecentlyViewedSpacesProps> = ({ onSpaceClick }) => {
    const [spaces, setSpaces] = useState<Space[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        const fetchRecentlyViewedSpaces = async () => {
            try {
                const response = await fetch('/api/spaces/recently-viewed');
                if (response.ok) {
                    const data = await response.json();
                    setSpaces(data);
                } else {
                    console.error('Error fetching recently viewed spaces:', response.statusText);
                }
            } catch (error) {
                console.error('Error fetching recently viewed spaces:', error);
            }
            setIsLoading(false);
        };

        fetchRecentlyViewedSpaces();
    }, []);

    if (isLoading) {
        return <Spinner />;
    }

    if (spaces.length === 0) {
        return (
            <EmptyState
                title="No recently viewed spaces"
                description="You haven't viewed any spaces recently."
            />
        );
    }

    return (
        <div className="p-4">
            <h2 className="text-xl font-semibold mb-4">Recently Viewed Spaces</h2>
            {spaces.map((space) => (
                <SpaceCard key={space.id} space={space}/>
            ))}
        </div>
    );
};

export default RecentlyViewedSpaces;
// components/SpaceSortDropdown.tsx
import React from 'react';
import Select from '@/components/Select';

interface SpaceSortDropdownProps {
    sortOption: string;
    onSortOptionChange: (option: string) => void;
    className?: string;
}

const SpaceSortDropdown: React.FC<SpaceSortDropdownProps> = ({
                                                                 sortOption,
                                                                 onSortOptionChange,
                                                                 className = '',
                                                             }) => {
    const sortOptions = [
        { value: 'latest', label: 'Latest' },
        { value: 'popular', label: 'Popular' },
        { value: 'alphabetical', label: 'Alphabetical' },
    ];

    return (
        <Select
            value={[sortOption]}
            onChange={(value) => onSortOptionChange(value[0])}
            options={sortOptions}
            className={className}
        />
    );
};

export default SpaceSortDropdown;
// components/Pagination.tsx
import React from 'react';

interface PaginationProps {
  currentPage: number;
  totalPages: number;
  onPageChange: (page: number) => void;
  className?: string;
  pageNeighbors?: number;
  previousLabel?: React.ReactNode;
  nextLabel?: React.ReactNode;
}

const Pagination: React.FC<PaginationProps> = ({
  currentPage,
  totalPages,
  onPageChange,
  className = '',
  pageNeighbors = 1,
  previousLabel = <ChevronLeftIcon />,
  nextLabel = <ChevronRightIcon />,
}) => {
  const getPageNumbers = () => {
    const pageNumbers = [];

    for (let i = 1; i <= totalPages; i++) {
      if (
        i === 1 ||
        i === totalPages ||
        (i >= currentPage - pageNeighbors && i <= currentPage + pageNeighbors)
      ) {
        pageNumbers.push(i);
      } else if (
        i === currentPage - pageNeighbors - 1 ||
        i === currentPage + pageNeighbors + 1
      ) {
        pageNumbers.push('...');
      }
    }

    return pageNumbers;
  };

  return (
    <nav className={`flex justify-center ${className}`} aria-label="Pagination">
      <ul className="inline-flex items-center -space-x-px">
        <li>
          <button
            onClick={() => onPageChange(currentPage - 1)}
            disabled={currentPage === 1}
            className={`${
              currentPage === 1
                ? 'cursor-not-allowed opacity-50'
                : 'hover:bg-gray-50 dark:hover:bg-gray-800'
            } block py-2 px-3 ml-0 leading-tight text-gray-500 bg-white border border-gray-300 rounded-l-lg dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400`}
          >
            <span className="sr-only">Previous</span>
            {previousLabel}
          </button>
        </li>
        {getPageNumbers().map((pageNumber, index) => (
          <li key={index}>
            {pageNumber === '...' ? (
              <span className="py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400">
                ...
              </span>
            ) : (
              <button
                onClick={() => onPageChange(Number(pageNumber))}
                className={`${
                  pageNumber === currentPage
                    ? 'text-blue-600 bg-blue-50 border-blue-300 dark:border-gray-700 dark:bg-gray-700 dark:text-white'
                    : 'text-gray-500 bg-white border-gray-300 dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-800'
                } py-2 px-3 leading-tight border`}
              >
                {pageNumber}
              </button>
            )}
          </li>
        ))}
        <li>
          <button
            onClick={() => onPageChange(currentPage + 1)}
            disabled={currentPage === totalPages}
            className={`${
              currentPage === totalPages
                ? 'cursor-not-allowed opacity-50'
                : 'hover:bg-gray-50 dark:hover:bg-gray-800'
            } block py-2 px-3 leading-tight text-gray-500 bg-white border border-gray-300 rounded-r-lg dark:bg-gray-800 dark:border-gray-700 dark:text-gray-400`}
          >
            <span className="sr-only">Next</span>
            {nextLabel}
          </button>
        </li>
      </ul>
    </nav>
  );
};

const ChevronLeftIcon: React.FC = () => (
  <svg
    className="w-5 h-5"
    fill="currentColor"
    viewBox="0 0 20 20"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fillRule="evenodd"
      d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
      clipRule="evenodd"
    />
  </svg>
);

const ChevronRightIcon: React.FC = () => (
  <svg
    className="w-5 h-5"
    fill="currentColor"
    viewBox="0 0 20 20"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fillRule="evenodd"
      d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
      clipRule="evenodd"
    />
  </svg>
);

export default Pagination;
import React from 'react';
import { Post, User, Tag, Comment } from '@/lib/prisma';
import Card from '@/components/Card';
import Avatar from '@/components/Avatar';
import Badge from '@/components/Badge';

interface PostCardProps {
  post: Post;
  onClick: () => void;
  author: User;
  tags: Tag[];
  comments: Comment[];
  views: number;
  likes: number;
}

const PostCard: React.FC<PostCardProps> = ({ post, onClick, author, tags, comments, views, likes }) => {
  return (
    <Card onClick={onClick}>
      <div className="flex items-center">
        <Avatar src={author.avatar} alt={author.username} size="small" />
        <div className="ml-2">
          <h3 className="font-semibold text-gray-800 dark:text-gray-200">{author.username}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400">{new Date(post.createdAt).toLocaleDateString()}</p>
        </div>
      </div>
      <div className="mt-4">
        <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">{post.title}</h2>
        <p className="mt-2 text-gray-600 dark:text-gray-400">{post.content}</p>
      </div>
      <div className="mt-4 flex flex-wrap">
        {tags.map((tag) => (
          <Badge key={tag.id} variant="primary" className="mr-2 mb-2">
            {tag.name}
          </Badge>
        ))}
      </div>
      <div className="mt-4 flex justify-between items-center">
        <div className="flex items-center">
          <svg className="w-4 h-4 mr-1 text-gray-600 dark:text-gray-400" viewBox="0 0 20 20" fill="currentColor">
            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
            <path
              fillRule="evenodd"
              d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z"
              clipRule="evenodd"
            />
          </svg>
          <span className="text-sm text-gray-600 dark:text-gray-400">{views}</span>
        </div>
        <div className="flex items-center">
          <svg className="w-4 h-4 mr-1 text-gray-600 dark:text-gray-400" viewBox="0 0 20 20" fill="currentColor">
            <path
              fillRule="evenodd"
              d="M3.172 5.172a4 4 0 015.656 0L10 6.343l1.172-1.171a4 4 0 115.656 5.656L10 17.657l-6.828-6.829a4 4 0 010-5.656z"
              clipRule="evenodd"
            />
          </svg>
          <span className="text-sm text-gray-600 dark:text-gray-400">{likes}</span>
        </div>
        <div className="flex items-center">
          <svg className="w-4 h-4 mr-1 text-gray-600 dark:text-gray-400" viewBox="0 0 20 20" fill="currentColor">
            <path
              fillRule="evenodd"
              d="M18 10c0 3.866-3.582 7-8 7a8.841 8.841 0 01-4.083-.98L2 17l1.338-3.123C2.493 12.767 2 11.434 2 10c0-3.866 3.582-7 8-7s8 3.134 8 7zM7 9H5v2h2V9zm8 0h-2v2h2V9zM9 9h2v2H9V9z"
              clipRule="evenodd"
            />
          </svg>
          <span className="text-sm text-gray-600 dark:text-gray-400">{comments.length}</span>
        </div>
      </div>
    </Card>
  );
};

export default PostCard;
// components/Feature.tsx
import React from 'react';

interface FeatureProps {
  icon: React.ReactNode;
  title: string;
  description: string;
  className?: string;
}

const Feature: React.FC<FeatureProps> = ({
  icon,
  title,
  description,
  className = '',
}) => {
  return (
    <div className={`flex flex-col items-center text-center ${className}`}>
      <div className="text-4xl mb-4">{icon}</div>
      <h3 className="text-xl font-semibold mb-2">{title}</h3>
      <p>{description}</p>
    </div>
  );
};

export default Feature;
import React, { useRef, useEffect, useState } from 'react';
import { motion } from 'framer-motion';

interface Tab {
  id: string;
  label: string;
}

interface TabsProps {
  tabs: Tab[];
  activeTab: string;
  onChange: (tabId: string) => void;
  className?: string;
}

const Tabs: React.FC<TabsProps> = ({ tabs, activeTab, onChange, className = '' }) => {
  const tabRefs = useRef<(HTMLButtonElement | null)[]>([]);
  const [lineWidth, setLineWidth] = useState(0);
  const [lineLeft, setLineLeft] = useState(0);

  useEffect(() => {
    const activeTabIndex = tabs.findIndex((tab) => tab.id === activeTab);
    const activeTabElement = tabRefs.current[activeTabIndex];

    if (activeTabElement) {
      setLineWidth(activeTabElement.offsetWidth);
      setLineLeft(activeTabElement.offsetLeft);
    }
  }, [activeTab, tabs]);

  return (
    <div className={`relative flex border-b border-gray-300 dark:border-gray-700 ${className}`}>
      {tabs.map((tab, index) => (
        <button
          key={tab.id}
          ref={(el) => (tabRefs.current[index] = el)}
          className={`px-4 py-2 text-sm font-medium focus:outline-none ${
            activeTab === tab.id
              ? 'text-blue-500 dark:text-blue-400'
              : 'text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300'
          }`}
          onClick={() => onChange(tab.id)}
        >
          {tab.label}
        </button>
      ))}
      <motion.div
        className="absolute bottom-0 left-0 h-0.5 bg-blue-500 dark:bg-blue-400"
        initial={false}
        animate={{
          width: lineWidth,
          left: lineLeft,
        }}
        transition={{ type: 'spring', stiffness: 300, damping: 30 }}
      />
    </div>
  );
};

export default Tabs;
// components/DatePicker.tsx
import React from 'react';
import DatePicker from 'react-datepicker';
import 'react-datepicker/dist/react-datepicker.css';

interface DatePickerProps {
  selected: Date;
  onChange: (date: Date | null) => void;
  selectsStart?: boolean;
  selectsEnd?: boolean;
  startDate?: Date;
  endDate?: Date;
  dateFormat?: string;
  className?: string;
}

const CustomDatePicker: React.FC<DatePickerProps> = ({
  selected,
  onChange,
  selectsStart,
  selectsEnd,
  startDate,
  endDate,
  dateFormat = 'MMM d, yyyy',
  className = '',
}) => {
  return (
    <DatePicker
      selected={selected}
      onChange={onChange}
      selectsStart={selectsStart}
      selectsEnd={selectsEnd}
      startDate={startDate}
      endDate={endDate}
      dateFormat={dateFormat}
      className={`border border-gray-300 rounded-md py-2 px-3 focus:outline-none focus:ring-2 focus:ring-blue-500 ${className}`}
    />
  );
};

export default CustomDatePicker;
// components/Card.tsx

import React from 'react';

interface CardProps {
  title?: string;
  children: React.ReactNode;
  className?: string;
  headerClassName?: string;
  bodyClassName?: string;
  footerClassName?: string;
  onClick?: () => void;
}

const Card: React.FC<CardProps> = ({
  title,
  children,
  className = '',
  headerClassName = '',
  bodyClassName = '',
  footerClassName = '',
  onClick,
}) => {
  return (
    <div
      className={`w-auto h-auto bg-gray-100 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg shadow-md ${className}`}
      onClick={onClick}
      role={onClick ? 'button' : undefined}
      tabIndex={onClick ? 0 : undefined}
    >
      {title && (
        <div className={`px-6 py-4 border-b border-gray-200 dark:border-gray-700 ${headerClassName}`}>
          <h3 className="text-lg font-semibold text-gray-800 dark:text-gray-200">{title}</h3>
        </div>
      )}
      <div className={`px-4 py-4 ${bodyClassName}`}>{children}</div>
      {footerClassName && <div className={`px-6 py-4 border-t border-gray-200 dark:border-gray-700 ${footerClassName}`}></div>}
    </div>
  );
};

export default Card;
// components/Slider.tsx
'use client';
import React, { useState, useRef, useEffect } from 'react';

interface SliderProps {
  min: number;
  max: number;
  step?: number;
  value: number;
  onChange: (value: number) => void;
  className?: string;
  trackClassName?: string;
  thumbClassName?: string;
  valueClassName?: string;
  showValue?: boolean;
  valuePosition?: 'top' | 'bottom';
}

const Slider: React.FC<SliderProps> = ({
  min,
  max,
  step = 1,
  value,
  onChange,
  className = '',
  trackClassName = '',
  thumbClassName = '',
  valueClassName = '',
  showValue = false,
  valuePosition = 'top',
}) => {
  const [dragging, setDragging] = useState(false);
  const sliderRef = useRef<HTMLDivElement>(null);
  const thumbRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleMouseUp = () => {
      setDragging(false);
    };

    document.addEventListener('mouseup', handleMouseUp);
    document.addEventListener('touchend', handleMouseUp);

    return () => {
      document.removeEventListener('mouseup', handleMouseUp);
      document.removeEventListener('touchend', handleMouseUp);
    };
  }, []);

  const handleMouseDown = () => {
    setDragging(true);
  };

  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const newValue = Number(event.target.value);
    onChange(newValue);
  };

  const handleSliderClick = (event: React.MouseEvent<HTMLDivElement>) => {
    if (sliderRef.current) {
      const { left, width } = sliderRef.current.getBoundingClientRect();
      const clickPosition = event.clientX - left;
      const percentage = clickPosition / width;
      const newValue = min + (max - min) * percentage;
      onChange(Math.round(newValue / step) * step);
    }
  };

  const getProgressStyle = () => {
    const progress = ((value - min) / (max - min)) * 100;
    return { width: `${progress}%` };
  };

  const getThumbStyle = () => {
    const progress = ((value - min) / (max - min)) * 100;
    return { left: `${progress}%` };
  };

  return (
    <div className={`relative ${className}`}>
      <div
        ref={sliderRef}
        className={`w-full h-2 bg-gray-200 dark:bg-gray-700 rounded-full cursor-pointer ${trackClassName}`}
        onClick={handleSliderClick}
      >
        <div
          className={`absolute top-0 left-0 h-2 bg-blue-500 rounded-full ${trackClassName}`}
          style={getProgressStyle()}
        ></div>
        <div
          ref={thumbRef}
          className={`absolute top-0 w-4 h-4 -mt-1 -ml-2 bg-white dark:bg-gray-800 rounded-full shadow cursor-pointer transform -translate-x-1/2 ${thumbClassName} ${
            dragging ? 'scale-110' : ''
          }`}
          style={getThumbStyle()}
          onMouseDown={handleMouseDown}
          onTouchStart={handleMouseDown}
        ></div>
      </div>
      <input
        type="range"
        min={min}
        max={max}
        step={step}
        value={value}
        onChange={handleChange}
        className="sr-only"
      />
      {showValue && (
        <div
          className={`absolute ${
            valuePosition === 'top' ? 'bottom-full mb-2' : 'top-full mt-2'
          } left-1/2 transform -translate-x-1/2 bg-gray-800 text-white rounded-md py-1 px-2 text-sm ${valueClassName}`}
        >
          {value}
        </div>
      )}
    </div>
  );
};

export default Slider;
// components/Popover.tsx
'use client';
import React, { useState, useRef, useEffect } from 'react';

interface PopoverProps {
  trigger: React.ReactNode;
  content: React.ReactNode;
  placement?: 'top' | 'right' | 'bottom' | 'left';
  className?: string;
  popoverClassName?: string;
  triggerClassName?: string;
  onOpen?: () => void;
  onClose?: () => void;
}

const Popover: React.FC<PopoverProps> = ({
  trigger,
  content,
  placement = 'bottom',
  className = '',
  popoverClassName = '',
  triggerClassName = '',
  onOpen,
  onClose,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const popoverRef = useRef<HTMLDivElement>(null);
  const triggerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      if (
        popoverRef.current &&
        triggerRef.current &&
        !popoverRef.current.contains(event.target as Node) &&
        !triggerRef.current.contains(event.target as Node)
      ) {
        closePopover();
      }
    };

    if (isOpen) {
      document.addEventListener('mousedown', handleClickOutside);
    }

    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, [isOpen]);

  const openPopover = () => {
    setIsOpen(true);
    onOpen && onOpen();
  };

  const closePopover = () => {
    setIsOpen(false);
    onClose && onClose();
  };

  const togglePopover = () => {
    if (isOpen) {
      closePopover();
    } else {
      openPopover();
    }
  };

  const getPlacementClasses = () => {
    switch (placement) {
      case 'top':
        return 'bottom-full left-1/2 transform -translate-x-1/2 mb-2';
      case 'right':
        return 'left-full top-1/2 transform -translate-y-1/2 ml-2';
      case 'bottom':
        return 'top-full left-1/2 transform -translate-x-1/2 mt-2';
      case 'left':
        return 'right-full top-1/2 transform -translate-y-1/2 mr-2';
      default:
        return 'top-full left-1/2 transform -translate-x-1/2 mt-2';
    }
  };

  return (
    <div className={`relative inline-block ${className}`}>
      <div
        ref={triggerRef}
        className={`inline-block ${triggerClassName}`}
        onClick={togglePopover}
      >
        {trigger}
      </div>
      {isOpen && (
        <div
          ref={popoverRef}
          className={`absolute z-10 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md shadow-lg ${getPlacementClasses()} ${popoverClassName}`}
        >
          {content}
        </div>
      )}
    </div>
  );
};

export default Popover;
import React from 'react';
import { Space, User, Project, Page, SpaceView } from '@/lib/prisma';
import Card from '@/components/Card';
import Avatar from '@/components/Avatar';

interface SpaceCardProps {
  space: Space;
  onClick: () => void;
  author: User;
  project?: Project;
  pages: Page[];
  views: SpaceView[];
}

const SpaceCard: React.FC<SpaceCardProps> = ({ space, onClick, author, project, pages, views }) => {
  return (
    <Card onClick={onClick}>
      <div className="flex items-center">
        <Avatar src={author.avatar} alt={author.username} size="small" />
        <div className="ml-2">
          <h3 className="font-semibold text-gray-800 dark:text-gray-200">{author.username}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400">{new Date(space.createdAt).toLocaleDateString()}</p>
        </div>
      </div>
      <div className="mt-4">
        <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">{space.title}</h2>
        <p className="mt-2 text-gray-600 dark:text-gray-400">{space.description}</p>
      </div>
      {project && (
        <div className="mt-4">
          <p className="text-sm text-gray-600 dark:text-gray-400">Project: {project.name}</p>
        </div>
      )}
      <div className="mt-4 flex justify-between items-center">
        <div className="flex items-center">
          <svg className="w-4 h-4 mr-1 text-gray-600 dark:text-gray-400" viewBox="0 0 20 20" fill="currentColor">
            <path d="M9 2a1 1 0 000 2h2a1 1 0 100-2H9z" />
            <path
              fillRule="evenodd"
              d="M4 5a2 2 0 012-2 3 3 0 003 3h2a3 3 0 003-3 2 2 0 012 2v11a2 2 0 01-2 2H6a2 2 0 01-2-2V5zm3 4a1 1 0 000 2h.01a1 1 0 100-2H7zm3 0a1 1 0 000 2h3a1 1 0 100-2h-3zm-3 4a1 1 0 100 2h.01a1 1 0 100-2H7zm3 0a1 1 0 100 2h3a1 1 0 100-2h-3z"
              clipRule="evenodd"
            />
          </svg>
          <span className="text-sm text-gray-600 dark:text-gray-400">{pages.length}</span>
        </div>
        <div className="flex items-center">
          <svg className="w-4 h-4 mr-1 text-gray-600 dark:text-gray-400" viewBox="0 0 20 20" fill="currentColor">
            <path d="M10 12a2 2 0 100-4 2 2 0 000 4z" />
            <path
              fillRule="evenodd"
              d="M.458 10C1.732 5.943 5.522 3 10 3s8.268 2.943 9.542 7c-1.274 4.057-5.064 7-9.542 7S1.732 14.057.458 10zM14 10a4 4 0 11-8 0 4 4 0 018 0z"
              clipRule="evenodd"
            />
          </svg>
          <span className="text-sm text-gray-600 dark:text-gray-400">{views.length}</span>
        </div>
      </div>
    </Card>
  );
};

export default SpaceCard;
// components/Radio.tsx
import React from 'react';

interface RadioProps {
  label: string;
  value: string;
  checked: boolean;
  onChange: (value: string) => void;
  className?: string;
  disabled?: boolean;
}

const Radio: React.FC<RadioProps> = ({
  label,
  value,
  checked,
  onChange,
  className = '',
  disabled = false,
}) => {
  const handleChange = () => {
    onChange(value);
  };

  return (
    <label className={`inline-flex items-center ${className}`}>
      <input
        type="radio"
        className={`form-radio h-5 w-5 text-blue-600 transition duration-150 ease-in-out ${
          disabled ? 'opacity-50 cursor-not-allowed' : ''
        }`}
        value={value}
        checked={checked}
        onChange={handleChange}
        disabled={disabled}
      />
      <span className={`ml-2 text-gray-700 dark:text-gray-300 ${disabled ? 'opacity-50' : ''}`}>
        {label}
      </span>
    </label>
  );
};

export default Radio;
// components/DownloadButton.tsx
import React from 'react';

interface DownloadButtonProps {
  onClick: () => void;
  className?: string;
}

const DownloadButton: React.FC<DownloadButtonProps> = ({ onClick, className = '' }) => {
  return (
    <button
      onClick={onClick}
      className={`flex items-center justify-center px-4 py-2 bg-green-500 dark:bg-green-700 text-white rounded-md shadow-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 ${className}`}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        className="h-5 w-5 mr-2"
        viewBox="0 0 20 20"
        fill="currentColor"
      >
        <path
          fillRule="evenodd"
          d="M6 2a2 2 0 00-2 2v12a2 2 0 002 2h8a2 2 0 002-2V7.414A2 2 0 0015.414 6L12 2.586A2 2 0 0010.586 2H6zm5 6a1 1 0 10-2 0v3.586l-1.293-1.293a1 1 0 10-1.414 1.414l3 3a1 1 0 001.414 0l3-3a1 1 0 00-1.414-1.414L11 11.586V8z"
          clipRule="evenodd"
        />
      </svg>
      <span className="text-sm font-medium">Download</span>
    </button>
  );
};

export default DownloadButton;
// components/ProgressRing.tsx
import React from 'react';

interface ProgressRingProps {
  progress: number;
  size?: number;
  strokeWidth?: number;
  color?: string;
}

const ProgressRing: React.FC<ProgressRingProps> = ({
  progress,
  size = 120,
  strokeWidth = 10,
  color = '#3B82F6',
}) => {
  const radius = (size - strokeWidth) / 2;
  const circumference = radius * 2 * Math.PI;
  const dash = (progress * circumference) / 100;

  return (
    <svg width={size} height={size} viewBox={`0 0 ${size} ${size}`}>
      <circle
        stroke="#E5E7EB"
        strokeWidth={strokeWidth}
        fill="transparent"
        r={radius}
        cx={size / 2}
        cy={size / 2}
      />
      <circle
        stroke={color}
        strokeWidth={strokeWidth}
        strokeLinecap="round"
        fill="transparent"
        r={radius}
        cx={size / 2}
        cy={size / 2}
        transform={`rotate(-90 ${size / 2} ${size / 2})`}
        strokeDasharray={`${dash} ${circumference - dash}`}
      />
      <text
        x="50%"
        y="50%"
        dominantBaseline="middle"
        textAnchor="middle"
        fontSize="24"
        fill={color}
      >
        {progress}%
      </text>
    </svg>
  );
};

export default ProgressRing;
// components/ProjectReports.tsx
import React, { useState, useEffect } from 'react';
import { format, subDays } from 'date-fns';
import Chart from 'react-apexcharts';
import CustomDatePicker from './DatePicker';
import { ApexOptions } from 'apexcharts';

interface ProjectReportsProps {
  projectId: number;
}

interface ReportData {
  date: string;
  completedTasks: number;
  totalTasks: number;
  openIssues: number;
  closedIssues: number;
  commitCount: number;
  memberContributions: { [key: string]: number };
}

const ProjectReports: React.FC<ProjectReportsProps> = ({ projectId }) => {
  const [reportData, setReportData] = useState<ReportData[]>([]);
  const [startDate, setStartDate] = useState(subDays(new Date(), 30));
  const [endDate, setEndDate] = useState(new Date());

  useEffect(() => {
    const fetchReportData = async () => {
      try {
        const response = await fetch(
          `/api/projects/${projectId}/reports?startDate=${startDate.toISOString()}&endDate=${endDate.toISOString()}`
        );
        if (response.ok) {
          const data = await response.json();
          setReportData(data);
        } else {
          console.error('Error fetching report data:', response.statusText);
        }
      } catch (error) {
        console.error('Error fetching report data:', error);
      }
    };

    fetchReportData();
  }, [projectId, startDate, endDate]);

  const taskCompletionData: ApexOptions = {
    chart: {
      type: 'line',
      height: 350,
    },
    series: [
      {
        name: 'Completed Tasks',
        data: reportData.map((data) => data.completedTasks),
      },
      {
        name: 'Total Tasks',
        data: reportData.map((data) => data.totalTasks),
      },
    ],
    xaxis: {
      categories: reportData.map((data) => format(new Date(data.date), 'MMM d, yyyy')),
    },
  };

  const issueStatusData: ApexOptions = {
    chart: {
      type: 'bar',
      height: 350,
      stacked: true,
    },
    series: [
      {
        name: 'Open Issues',
        data: reportData.map((data) => data.openIssues),
      },
      {
        name: 'Closed Issues',
        data: reportData.map((data) => data.closedIssues),
      },
    ],
    plotOptions: {
      bar: {
        horizontal: false,
      },
    },
    xaxis: {
      categories: reportData.map((data) => format(new Date(data.date), 'MMM d, yyyy')),
    },
  };

  const commitCountData: ApexOptions = {
    chart: {
      type: 'area',
      height: 350,
    },
    series: [
      {
        name: 'Commit Count',
        data: reportData.map((data) => data.commitCount),
      },
    ],
    xaxis: {
      categories: reportData.map((data) => format(new Date(data.date), 'MMM d, yyyy')),
    },
  };

  const memberContributionData: ApexOptions = {
    chart: {
      type: 'pie',
      height: 350,
    },
    series: Object.values(
      reportData.reduce((acc, curr) => {
        Object.entries(curr.memberContributions).forEach(([member, count]) => {
          if (!acc[member]) {
            acc[member] = 0;
          }
          acc[member] += count;
        });
        return acc;
      }, {} as { [key: string]: number })
    ),
    labels: Object.keys(
      reportData.reduce((acc, curr) => {
        Object.entries(curr.memberContributions).forEach(([member, count]) => {
          if (!acc[member]) {
            acc[member] = 0;
          }
          acc[member] += count;
        });
        return acc;
      }, {} as { [key: string]: number })
    ),
  };
  const handleStartDateChange = (date: Date | null) => {
    if (date) {
      setStartDate(date);
    }
  };

  const handleEndDateChange = (date: Date | null) => {
    if (date) {
      setEndDate(date);
    }
  };

  return (
    <div className="bg-white dark:bg-gray-800 shadow rounded-lg p-4">
      <h2 className="text-xl font-semibold mb-4">Project Reports</h2>
      <div className="mb-4">
        <div className="flex items-center mb-4">
          <CustomDatePicker
            selected={startDate}
            onChange={handleStartDateChange}
            selectsStart
            startDate={startDate}
            endDate={endDate}
            className="mr-2"
          />
          <span className="mr-2">to</span>
          <CustomDatePicker
            selected={endDate}
            onChange={handleEndDateChange}
            selectsEnd
            startDate={startDate}
            endDate={endDate}
          />
        </div>
        <div className="mb-4">
        <h3 className="text-lg font-semibold mb-2">Task Completion Rate</h3>
        <Chart options={taskCompletionData} series={taskCompletionData.series} type="line" height={350} />
      </div>
      <div className="mb-4">
        <h3 className="text-lg font-semibold mb-2">Issue Status</h3>
        <Chart options={issueStatusData} series={issueStatusData.series} type="bar" height={350} />
      </div>
      <div className="mb-4">
        <h3 className="text-lg font-semibold mb-2">Commit Count</h3>
        <Chart options={commitCountData} series={commitCountData.series} type="area" height={350} />
      </div>
      <div>
        <h3 className="text-lg font-semibold mb-2">Member Contributions</h3>
        <Chart options={memberContributionData} series={memberContributionData.series} type="pie" height={350} />
      </div>
    </div>
  </div>
  );
};

export default ProjectReports;
// components/SubscribeButton.tsx
import React, { useState } from 'react';
import BellIcon from '@/components/icons/BellIcon';

interface SubscribeButtonProps {
  itemId: number;
  itemType: string;
  onSubscribe: (itemId: number, itemType: string) => void;
}

const SubscribeButton: React.FC<SubscribeButtonProps> = ({ itemId, itemType, onSubscribe }) => {
  const [isSubscribed, setIsSubscribed] = useState(false);

  const handleSubscribe = () => {
    setIsSubscribed(!isSubscribed);
    onSubscribe(itemId, itemType);
  };

  return (
    <button
      className={`flex items-center ${
        isSubscribed ? 'text-green-500' : 'text-gray-600 dark:text-gray-400'
      } hover:text-green-500 dark:hover:text-green-400`}
      onClick={handleSubscribe}
    >
      <BellIcon className="w-5 h-5 mr-1" />
      <span>{isSubscribed ? 'Subscribed' : 'Subscribe'}</span>
    </button>
  );
};

export default SubscribeButton;
// components/PopularSpaces.tsx
import React, { useEffect, useState } from 'react';
import SpaceCard from '@/components/SpaceCard';
import EmptyState from '@/components/EmptyState';
import Spinner from '@/components/Spinner';
import { Space } from '@/lib/prisma';

interface PopularSpacesProps {
    onSpaceClick: (spaceId: number) => void;
}

const PopularSpaces: React.FC<PopularSpacesProps> = ({ onSpaceClick }) => {
    const [spaces, setSpaces] = useState<Space[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        const fetchPopularSpaces = async () => {
            try {
                const response = await fetch('/api/spaces/popular');
                if (response.ok) {
                    const data = await response.json();
                    setSpaces(data);
                } else {
                    console.error('Error fetching popular spaces:', response.statusText);
                }
            } catch (error) {
                console.error('Error fetching popular spaces:', error);
            }
            setIsLoading(false);
        };

        fetchPopularSpaces();
    }, []);

    if (isLoading) {
        return <Spinner />;
    }

    if (spaces.length === 0) {
        return (
            <EmptyState
                title="No popular spaces"
                description="There are no popular spaces at the moment."
            />
        );
    }

    return (
        <div className="p-4">
            <h2 className="text-xl font-semibold mb-4">Popular Spaces</h2>
            {spaces.map((space) => (
                <SpaceCard key={space.id} space={space}/>
            ))}
        </div>
    );
};

export default PopularSpaces;
// components/TagInput.tsx
'use client';
import React, { useState } from 'react';

interface TagInputProps {
  tags: string[];
  onChange: (tags: string[]) => void;
  placeholder?: string;
  className?: string;
  id?: string;
}

const TagInput: React.FC<TagInputProps> = ({
  tags,
  onChange,
  placeholder = 'Enter tags...',
  className = '',
  id,
}) => {
  const [inputValue, setInputValue] = useState('');

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setInputValue(e.target.value);
  };

  const handleInputKeyDown = (e: React.KeyboardEvent<HTMLInputElement>) => {
    if (e.key === 'Enter' && inputValue.trim() !== '') {
      e.preventDefault();
      const newTag = inputValue.trim();
      if (!tags.includes(newTag)) {
        onChange([...tags, newTag]);
      }
      setInputValue('');
    } else if (e.key === 'Backspace' && inputValue === '' && tags.length > 0) {
      onChange(tags.slice(0, -1));
    }
  };

  const handleTagRemove = (tagToRemove: string) => {
    onChange(tags.filter((tag) => tag !== tagToRemove));
  };

  return (
    <div id={id} className={`bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-md p-2 flex flex-wrap ${className}`}>
      {tags.map((tag) => (
        <span
          key={tag}
          className="bg-blue-500 text-white rounded-md px-2 py-1 text-sm mr-2 mb-0 flex items-center"
        >
          {tag}
          <button
            type="button"
            className="ml-1 focus:outline-none"
            onClick={() => handleTagRemove(tag)}
          >
            &times;
          </button>
        </span>
      ))}
      <input
        type="text"
        value={inputValue}
        onChange={handleInputChange}
        onKeyDown={handleInputKeyDown}
        placeholder={placeholder}
        className="flex-grow focus:outline-none h-6 bg-transparent text-gray-800 dark:text-gray-200 px-2 py-1"
      />
    </div>
  );
};

export default TagInput;
// components/SearchBar.tsx
'use client'
import React, { useState, useEffect, useRef } from 'react';
import { AnimatePresence, motion } from 'framer-motion';
import { debounce } from 'lodash';
import Avatar from '@/components/Avatar';
import Button from '@/components/Button';
import Skeleton from '@/components/Skeleton';

export interface SearchResult {
  id: string;
  type: 'post' | 'project' | 'file' | 'space' | 'profile';
  title: string;
  description: string;
  value: string;
  image?: string;
  url: string;
}

interface SearchBarProps {
  onSearch: (query: string) => void;
  className?: string;
  placeholder?: string;
  value?: string;
  onChange?: (value: string) => void;
}

const SearchBar: React.FC<SearchBarProps> = ({
  onSearch,
  className = '',
  placeholder = 'Search...',
}) => {
  const [searchQuery, setSearchQuery] = useState('');
  const [searchResults, setSearchResults] = useState<SearchResult[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [isOpen, setIsOpen] = useState(false);
  const inputRef = useRef<HTMLInputElement>(null);
  const [showDropdown, setShowDropdown] = useState(false);
  const dropdownTimeout = useRef<NodeJS.Timeout | null>(null);

  const fetchSearchResults = async (query: string) => {
    if (query.trim() === '') {
      setSearchResults([]);
      return;
    }

    setIsLoading(true);

    try {
      const response = await fetch(`/api/search?q=${encodeURIComponent(query)}`);
      const data = await response.json();
      setSearchResults(data);
    } catch (error) {
      console.error('Error fetching search results:', error);
    }

    setIsLoading(false);
  };

  const debouncedFetchSearchResults = debounce(fetchSearchResults, 300);

  useEffect(() => {
    if (searchQuery.trim() !== '') {
      debouncedFetchSearchResults(searchQuery);
      if (dropdownTimeout.current) {
        clearTimeout(dropdownTimeout.current);
      }
      dropdownTimeout.current = setTimeout(() => {
        setShowDropdown(true);
      }, 200); // Adjust the delay as needed
    } else {
      setSearchResults([]);
      setShowDropdown(false);
    }
  }, [searchQuery]);

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    onSearch(searchQuery);
  };

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setSearchQuery(e.target.value);
    setIsOpen(true);
  };

  const handleResultClick = (result: SearchResult) => {
    setSearchQuery('');
    setIsOpen(false);
    window.location.href = result.url;
  };

  const handleClickOutside = (e: MouseEvent) => {
    if (inputRef.current && !inputRef.current.contains(e.target as Node)) {
      setIsOpen(false);
    }
  };

  useEffect(() => {
    document.addEventListener('mousedown', handleClickOutside);
    return () => {
      document.removeEventListener('mousedown', handleClickOutside);
    };
  }, []);

  return (
    <form onSubmit={handleSearch} className={`relative ${className}`}>
      <input
        type="text"
        ref={inputRef}
        className="w-full h-8 pl-10 pr-4 py-1 rounded-md border border-gray-300 bg-gray-100 dark:bg-gray-700 dark:placeholder:text-gray-300 dark:text-gray-100 text-gray-600 dark:bg-blend-darken focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        placeholder={placeholder}
        value={searchQuery}
        onChange={handleInputChange}
      />
      <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
        <svg
          className="h-5 w-5 text-gray-400"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
          aria-hidden="true"
        >
          <path
            fillRule="evenodd"
            d="M8 4a4 4 0 100 8 4 4 0 000-8zM2 8a6 6 0 1110.89 3.476l4.817 4.817a1 1 0 01-1.414 1.414l-4.816-4.816A6 6 0 012 8z"
            clipRule="evenodd"
          />
        </svg>
      </div>
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: -10 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: -10 }}
            transition={{ duration: 0.3 }}
            className="absolute z-10 mt-2 w-full rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 focus:outline-none"
          >
            {searchResults.length > 0 ? (
                searchResults.map((result) => (
                  <div
                    key={result.id}
                    className="px-4 py-2 cursor-pointer hover:bg-gray-100 dark:hover:bg-gray-700"
                    onClick={() => handleResultClick(result)}
                  >
                    <div className="flex items-center">
                      {result.image && <Avatar src={result.image} alt={result.title} size="small" className="mr-2" />}
                      <div>
                        <p className="text-sm font-medium text-gray-900 dark:text-gray-100">{result.title}</p>
                        <p className="text-xs text-gray-500 dark:text-gray-400">{result.description}</p>
                      </div>
                    </div>
                  </div>
                ))
            ) : (
              <div className="px-4 py-2">
                <p className="text-sm text-gray-500 dark:text-gray-400">No results found.</p>
              </div>
            )}
          </motion.div>
        )}
      </AnimatePresence>
    </form>
  );
};

export default SearchBar;
// components/Breadcrumbs.tsx
import React from 'react';
import Link from 'next/link';

interface BreadcrumbItem {
  label: string;
  href: string;
}

interface BreadcrumbsProps {
  items: BreadcrumbItem[];
  className?: string;
  style?: React.CSSProperties;
  separator?: React.ReactNode;
  activeClassName?: string;
}

const Breadcrumbs: React.FC<BreadcrumbsProps> = ({
  items,
  className = '',
  style,
  separator = '/',
  activeClassName = 'text-gray-500',
}) => {
  return (
    <nav className={`flex ${className}`} aria-label="Breadcrumb" style={style}>
      <ol className="inline-flex items-center space-x-1 md:space-x-3">
        {items.map((item, index) => (
          <li key={item.href} className="inline-flex items-center">
            {index > 0 && (
              <span className="text-gray-500 mx-2">{separator}</span>
            )}
            {index === items.length - 1 ? (
              <span className={`text-sm font-medium ${activeClassName}`}>
                {item.label}
              </span>
            ) : (
              <Link href={item.href}>
                <a className="text-sm font-medium text-blue-500 hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300">
                  {item.label}
                </a>
              </Link>
            )}
          </li>
        ))}
      </ol>
    </nav>
  );
};

export default Breadcrumbs;
// components/CreateSpaceModal.tsx
import React, { useState } from 'react';
import Modal from '@/components/Modal';
import FormGroup from '@/components/FormGroup';
import Input from '@/components/Input';
import Textarea from '@/components/Textarea';
import Select from '@/components/Select';
import Button from '@/components/Button';
import { Project } from '@/lib/prisma'; 

interface CreateSpaceModalProps {
    isOpen: boolean;
    onClose: () => void;
    onSubmit: (title: string, description: string, projectId: number | null) => void;
    projects: Project[];
}

const CreateSpaceModal: React.FC<CreateSpaceModalProps> = ({
                                                               isOpen,
                                                               onClose,
                                                               onSubmit,
                                                               projects,
                                                           }) => {
    const [title, setTitle] = useState('');
    const [description, setDescription] = useState('');
    const [projectId, setProjectId] = useState<number | null>(null);

    const handleSubmit = () => {
        onSubmit(title, description, projectId);
        setTitle('');
        setDescription('');
        setProjectId(null);
    };

    return (
        <Modal isOpen={isOpen} onClose={onClose} title="Create Space">
            <FormGroup>
                <Input
                    name="title"
                    id="title"
                    type="text"
                    placeholder="Title"
                    value={title}
                    onChange={(e) => setTitle}
                />
            </FormGroup>
            <FormGroup>
                <Textarea
                    placeholder="Description"
                    value={description}
                    onChange={(e) => setDescription}
                />
            </FormGroup>
            <FormGroup>
                <Select
                    options={{...projects.map((project) => ({ value: project.id, label: project.name }))}}
                    value={[projectId] ?[] : []}
                    onChange={(value) => setProjectId}
                />
            </FormGroup>
            <div className="flex justify-end">
                <Button onClick={handleSubmit}>Create</Button>
            </div>
        </Modal>
    );
};

export default CreateSpaceModal;
// components/SpaceCategoryFilter.tsx
import React from 'react';
import Link from 'next/link';

interface SpaceCategoryFilterProps {
    selectedCategory: string | null;
    onCategoryFilter: (category: string | null) => void;
    className?: string;
}

const SpaceCategoryFilter: React.FC<SpaceCategoryFilterProps> = ({
                                                                     selectedCategory,
                                                                     onCategoryFilter,
                                                                     className = '',
                                                                 }) => {
    const categories = [{id: 1, name: 'Category 1'}, {id: 2, name: 'Category 2'}, {id: 3, name: 'Category 3'}]; // Replace with your actual categories

    return (
        <div className="p-4">
            <h2 className="text-xl font-semibold mb-4">Categories</h2>
            <ul className="space-y-2">
                {categories.map((category) => (
                    <li key={category.id}>
                        <Link href={`/spaces?category=${category.id}`}>{category.name}</Link>
                    </li>
                ))}
            </ul>
        </div>
    );
};

export default SpaceCategoryFilter;
import React from 'react';
import { Project, User, Space, Issue } from '@/lib/prisma';
import Card from '@/components/Card';
import Avatar from '@/components/Avatar';

interface ProjectCardProps {
  project: Project;
  onClick: () => void;
  owner: User;
  members: User[];
  spaces: Space[];
  issues: Issue[];
}

const ProjectCard: React.FC<ProjectCardProps> = ({ project, onClick, owner, members, spaces, issues }) => {
  return (
    <Card onClick={onClick}>
      <div className="flex items-center">
        <Avatar src={owner.avatar} alt={owner.username} size="small" />
        <div className="ml-2">
          <h3 className="font-semibold text-gray-800 dark:text-gray-200">{owner.username}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400">{new Date(project.createdAt).toLocaleDateString()}</p>
        </div>
      </div>
      <div className="mt-4">
        <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">{project.name}</h2>
        <p className="mt-2 text-gray-600 dark:text-gray-400">{project.description}</p>
      </div>
      <div className="mt-4 flex justify-between items-center">
        <div className="flex items-center">
          <svg className="w-4 h-4 mr-1 text-gray-600 dark:text-gray-400" viewBox="0 0 20 20" fill="currentColor">
            <path d="M13 6a3 3 0 11-6 0 3 3 0 016 0zM18 8a2 2 0 11-4 0 2 2 0 014 0zM14 15a4 4 0 00-8 0v3h8v-3zM6 8a2 2 0 11-4 0 2 2 0 014 0zM16 18v-3a5.972 5.972 0 00-.75-2.906A3.005 3.005 0 0119 15v3h-3zM4.75 12.094A5.973 5.973 0 004 15v3H1v-3a3 3 0 013.75-2.906z" />
          </svg>
          <span className="text-sm text-gray-600 dark:text-gray-400">{members.length}</span>
        </div>
        <div className="flex items-center">
          <svg className="w-4 h-4 mr-1 text-gray-600 dark:text-gray-400" viewBox="0 0 20 20" fill="currentColor">
            <path d="M7 3a1 1 0 000 2h6a1 1 0 100-2H7zM4 7a1 1 0 011-1h10a1 1 0 110 2H5a1 1 0 01-1-1zM2 11a2 2 0 012-2h12a2 2 0 012 2v4a2 2 0 01-2 2H4a2 2 0 01-2-2v-4z" />
          </svg>
          <span className="text-sm text-gray-600 dark:text-gray-400">{spaces.length}</span>
        </div>
        <div className="flex items-center">
          <svg className="w-4 h-4 mr-1 text-gray-600 dark:text-gray-400" viewBox="0 0 20 20" fill="currentColor">
            <path
              fillRule="evenodd"
              d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z"
              clipRule="evenodd"
            />
          </svg>
          <span className="text-sm text-gray-600 dark:text-gray-400">{issues.length}</span>
        </div>
      </div>
    </Card>
  );
};

export default ProjectCard;
// components/ReportDashboard.tsx
import React from 'react';
import Card from '@/components/Card';
import ProjectReports from '@/components/ProjectReports';

interface ReportDashboardProps {
  projectId: number;
}

const ReportDashboard: React.FC<ReportDashboardProps> = ({ projectId }) => {
  return (
    <div>
      <Card className="mb-8">
        <h2 className="text-xl font-semibold mb-4">Project Overview</h2>
        {/* Add project overview metrics */}
      </Card>
      <Card className="mb-8">
        <h2 className="text-xl font-semibold mb-4">Task Completion</h2>
        {/* Add task completion metrics */}
      </Card>
      <Card className="mb-8">
        <h2 className="text-xl font-semibold mb-4">Issue Tracking</h2>
        {/* Add issue tracking metrics */}
      </Card>
      <ProjectReports projectId={projectId} />
    </div>
  );
};

export default ReportDashboard;
// components/Accordion.tsx
'use client';
import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface AccordionItemProps {
  id: string;
  title: string;
  children: React.ReactNode;
}

interface AccordionProps {
  children: React.ReactElement<AccordionItemProps>[];
  className?: string;
  style?: React.CSSProperties;
  defaultActiveId?: string;
  allowMultiple?: boolean;
  onChange?: (activeIds: string[]) => void;
}

const AccordionItem: React.FC<AccordionItemProps> = ({ children }) => <>{children}</>;

const Accordion: React.FC<AccordionProps> = ({
  children,
  className = '',
  style,
  defaultActiveId,
  allowMultiple = false,
  onChange,
}) => {
  const [activeIds, setActiveIds] = useState<string[]>(defaultActiveId ? [defaultActiveId] : []);

  const handleItemClick = (itemId: string) => {
    let updatedActiveIds: string[];
    if (allowMultiple) {
      updatedActiveIds = activeIds.includes(itemId)
        ? activeIds.filter((id) => id !== itemId)
        : [...activeIds, itemId];
    } else {
      updatedActiveIds = activeIds.includes(itemId) ? [] : [itemId];
    }
    setActiveIds(updatedActiveIds);
    if (onChange) {
      onChange(updatedActiveIds);
    }
  };

  return (
    <div className={`accordion ${className}`} style={style}>
      {React.Children.map(children, (child) => {
        if (!React.isValidElement(child)) {
          return null;
        }
        const { id, title } = child.props;
        return (
          <div key={id} className="accordion-item">
            <button
              className={`accordion-header ${activeIds.includes(id) ? 'active' : ''}`}
              onClick={() => handleItemClick(id)}
            >
              <span className="accordion-title">{title}</span>
              <span className="accordion-icon">{activeIds.includes(id) ? '-' : '+'}</span>
            </button>
            <AnimatePresence>
              {activeIds.includes(id) && (
                <motion.div
                  className="accordion-content"
                  initial={{ height: 0, opacity: 0 }}
                  animate={{ height: 'auto', opacity: 1 }}
                  exit={{ height: 0, opacity: 0 }}
                  transition={{ duration: 0.3 }}
                >
                  {child}
                </motion.div>
              )}
            </AnimatePresence>
          </div>
        );
      })}
    </div>
  );
};

export { AccordionItem } 
export default Accordion;
// components/FeaturedSection.tsx
import React from 'react';

interface FeaturedSectionProps {
    title: string;
    children: React.ReactNode;
    className?: string;
}

const FeaturedSection: React.FC<FeaturedSectionProps> = ({ title, children, className = '' }) => {
    return (
        <section className={`${className}`}>
            <h2 className="text-3xl font-semibold mb-8 text-gray-800 dark:text-white">{title}</h2>
            {children}
        </section>
    );
};

export default FeaturedSection;
// components/Drawer.tsx
import React from 'react';
import { motion } from 'framer-motion';
import { FiX } from 'react-icons/fi';

interface DrawerProps {
  isOpen: boolean;
  onClose: () => void;
  children: React.ReactNode;
}

const Drawer: React.FC<DrawerProps> = ({ isOpen, onClose, children }) => {
  const drawerVariants = {
    open: { x: 0 },
    closed: { x: '-100%' },
  };

  return (
    <motion.div
      className="fixed inset-y-0 left-0 z-50 w-64 bg-white dark:bg-gray-800 shadow-lg"
      initial="closed"
      animate={isOpen ? 'open' : 'closed'}
      variants={drawerVariants}
      transition={{ duration: 0.3 }}
    >
      <div className="flex justify-between items-center p-4">
        <h2 className="text-xl font-semibold">Menu</h2>
        <button
          className="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 focus:outline-none"
          onClick={onClose}
        >
          <FiX className="h-6 w-6" />
        </button>
      </div>
      <div className="px-4 py-2">{children}</div>
    </motion.div>
  );
};

export default Drawer;
// components/ProgressBar.tsx
import React from 'react';

interface ProgressBarProps {
  progress: number;
  className?: string;
  labelClassName?: string;
  barClassName?: string;
  label?: string;
  showPercentage?: boolean;
}

const ProgressBar: React.FC<ProgressBarProps> = ({
  progress,
  className = '',
  labelClassName = '',
  barClassName = '',
  label = '',
  showPercentage = false,
}) => {
  const getProgressWidth = () => {
    return `${progress}%`;
  };

  return (
    <div className={`flex items-center ${className}`}>
      {label && <span className={`mr-4 ${labelClassName}`}>{label}</span>}
      <div className="w-full bg-gray-200 rounded-full h-2.5 dark:bg-gray-700">
        <div
          className={`bg-blue-600 h-2.5 rounded-full dark:bg-blue-500 ${barClassName}`}
          style={{ width: getProgressWidth() }}
        ></div>
      </div>
      {showPercentage && (
        <span className={`ml-4 ${labelClassName}`}>{`${progress}%`}</span>
      )}
    </div>
  );
};

export default ProgressBar;
// components/Tooltip.tsx
'use client';
import React, { useState } from 'react';

interface TooltipProps {
  content: string;
  children: React.ReactNode;
  position?: 'top' | 'right' | 'bottom' | 'left';
  className?: string;
  tooltipClassName?: string;
  delay?: number;
  trigger?: 'hover' | 'click';
}

const Tooltip: React.FC<TooltipProps> = ({
  content,
  children,
  position = 'top',
  className = '',
  tooltipClassName = '',
  delay = 0,
  trigger = 'hover',
}) => {
  const [isVisible, setIsVisible] = useState(false);
  const [delayTimer, setDelayTimer] = useState<NodeJS.Timeout | null>(null);

  const showTooltip = () => {
    if (delay > 0) {
      setDelayTimer(setTimeout(() => setIsVisible(true), delay));
    } else {
      setIsVisible(true);
    }
  };

  const hideTooltip = () => {
    if (delayTimer) {
      clearTimeout(delayTimer);
      setDelayTimer(null);
    }
    setIsVisible(false);
  };

  const toggleTooltip = () => {
    setIsVisible(!isVisible);
  };

  const getPositionClasses = () => {
    switch (position) {
      case 'top':
        return 'bottom-full left-1/2 transform -translate-x-1/2 -translate-y-2';
      case 'right':
        return 'left-full top-1/2 transform -translate-y-1/2 translate-x-2';
      case 'bottom':
        return 'top-full left-1/2 transform -translate-x-1/2 translate-y-2';
      case 'left':
        return 'right-full top-1/2 transform -translate-y-1/2 -translate-x-2';
      default:
        return 'bottom-full left-1/2 transform -translate-x-1/2 -translate-y-2';
    }
  };

  const handleMouseEnter = () => {
    if (trigger === 'hover') {
      showTooltip();
    }
  };

  const handleMouseLeave = () => {
    if (trigger === 'hover') {
      hideTooltip();
    }
  };

  const handleClick = () => {
    if (trigger === 'click') {
      toggleTooltip();
    }
  };

  return (
    <div
      className={`relative inline-block ${className}`}
      onMouseEnter={handleMouseEnter}
      onMouseLeave={handleMouseLeave}
      onClick={handleClick}
    >
      {children}
      {isVisible && (
        <div
          className={`absolute z-10 px-3 py-2 text-sm font-medium text-white bg-gray-900 rounded-md shadow-sm opacity-0 transition-opacity duration-300 ${getPositionClasses()} ${tooltipClassName}`}
        >
          {content}
          <div
            className={`absolute w-0 h-0 ${
              position === 'top'
                ? 'border-t-8 border-t-gray-900 border-l-8 border-l-transparent border-r-8 border-r-transparent -bottom-2 left-1/2 transform -translate-x-1/2'
                : position === 'right'
                ? 'border-r-8 border-r-gray-900 border-t-8 border-t-transparent border-b-8 border-b-transparent -left-2 top-1/2 transform -translate-y-1/2'
                : position === 'bottom'
                ? 'border-b-8 border-b-gray-900 border-l-8 border-l-transparent border-r-8 border-r-transparent -top-2 left-1/2 transform -translate-x-1/2'
                : 'border-l-8 border-l-gray-900 border-t-8 border-t-transparent border-b-8 border-b-transparent -right-2 top-1/2 transform -translate-y-1/2'
            }`}
          ></div>
        </div>
      )}
    </div>
  );
};

export default Tooltip;
// components/Alert.tsx

import React from 'react';

interface AlertProps {
  children: React.ReactNode;
  variant?: 'info' | 'success' | 'warning' | 'error';
  onClose?: () => void;
  className?: string;
}

const Alert: React.FC<AlertProps> = ({
  children,
  variant = 'info',
  onClose,
  className = '',
}) => {
  const getVariantClasses = () => {
    switch (variant) {
      case 'info':
        return 'bg-blue-100 text-blue-700';
      case 'success':
        return 'bg-green-100 text-green-700';
      case 'warning':
        return 'bg-yellow-100 text-yellow-700';
      case 'error':
        return 'bg-red-100 text-red-700';
      default:
        return 'bg-blue-100 text-blue-700';
    }
  };

  return (
    <div
      className={`p-4 mb-4 rounded-md ${getVariantClasses()} ${className}`}
      role="alert"
    >
      <div className="flex items-center">
        <div className="flex-shrink-0">
          {variant === 'info' && (
            <svg
              className="w-5 h-5 text-blue-400"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              aria-hidden="true"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-12a1 1 0 10-2 0v4a1 1 0 00.293.707l2.828 2.829a1 1 0 101.415-1.415L11 9.586V6z"
                clipRule="evenodd"
              />
            </svg>
          )}
          {variant === 'success' && (
            <svg
              className="w-5 h-5 text-green-400"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              aria-hidden="true"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z"
                clipRule="evenodd"
              />
            </svg>
          )}
          {variant === 'warning' && (
            <svg
              className="w-5 h-5 text-yellow-400"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              aria-hidden="true"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zm1-7a1 1 0 10-2 0v2a1 1 0 102 0v-2zm-1-5a1 1 0 011 1v.01a1 1 0 11-2 0V7a1 1 0 011-1z"
                clipRule="evenodd"
              />
            </svg>
          )}
          {variant === 'error' && (
            <svg
              className="w-5 h-5 text-red-400"
              xmlns="http://www.w3.org/2000/svg"
              viewBox="0 0 20 20"
              fill="currentColor"
              aria-hidden="true"
            >
              <path
                fillRule="evenodd"
                d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                clipRule="evenodd"
              />
            </svg>
          )}
        </div>
        <div className="ml-3">
          <p className="text-sm font-medium">{children}</p>
        </div>
        {onClose && (
          <div className="ml-auto pl-3">
            <div className="-mx-1.5 -my-1.5">
              <button
                type="button"
                className="inline-flex bg-transparent rounded-md p-1.5 text-gray-400 hover:text-gray-500 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
                onClick={onClose}
              >
                <span className="sr-only">Dismiss</span>
                <svg
                  className="w-5 h-5"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                  aria-hidden="true"
                >
                  <path
                    fillRule="evenodd"
                    d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
                    clipRule="evenodd"
                  />
                </svg>
              </button>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Alert;
// components/TimePicker.tsx
'use client';
import React, { useState } from 'react';

interface TimePickerProps {
  value: string;
  onChange: (time: string) => void;
  className?: string;
  inputClassName?: string;
  popupClassName?: string;
  format?: '12h' | '24h';
  hourStep?: number;
  minuteStep?: number;
}

const TimePicker: React.FC<TimePickerProps> = ({
  value,
  onChange,
  className = '',
  inputClassName = '',
  popupClassName = '',
  format = '12h',
  hourStep = 1,
  minuteStep = 1,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedTime, setSelectedTime] = useState(value);

  const handleInputClick = () => {
    setIsOpen(!isOpen);
  };

  const handleTimeChange = (newTime: string) => {
    setSelectedTime(newTime);
    onChange(newTime);
  };

  const formatTime = (time: string) => {
    const [hours, minutes] = time.split(':');
    let formattedTime = time;

    if (format === '12h') {
      const suffix = parseInt(hours, 10) >= 12 ? 'PM' : 'AM';
      const formattedHours = parseInt(hours, 10) % 12 || 12;
      formattedTime = `${formattedHours}:${minutes} ${suffix}`;
    }

    return formattedTime;
  };

  const generateTimeOptions = () => {
    const options = [];

    for (let hour = 0; hour < 24; hour += hourStep) {
      for (let minute = 0; minute < 60; minute += minuteStep) {
        const time = `${hour.toString().padStart(2, '0')}:${minute.toString().padStart(2, '0')}`;
        options.push(
          <div
            key={time}
            className={`px-4 py-2 hover:bg-gray-100 dark:hover:bg-gray-700 cursor-pointer ${
              selectedTime === time ? 'bg-blue-500 text-white' : ''
            }`}
            onClick={() => handleTimeChange(time)}
          >
            {formatTime(time)}
          </div>
        );
      }
    }

    return options;
  };

  return (
    <div className={`relative ${className}`}>
      <input
        type="text"
        value={formatTime(selectedTime)}
        onClick={handleInputClick}
        readOnly
        className={`w-full px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-gray-300 dark:border-gray-600 dark:focus:ring-blue-600 dark:focus:border-blue-600 ${inputClassName}`}
      />
      {isOpen && (
        <div className={`absolute z-10 bg-white dark:bg-gray-800 rounded-md shadow-lg mt-1 overflow-y-auto max-h-48 ${popupClassName}`}>
          {generateTimeOptions()}
        </div>
      )}
    </div>
  );
};

export default TimePicker;
// components/Footer.tsx

import React from 'react';
import Link from 'next/link';

const Footer: React.FC = () => {
  return (
    <footer className="bg-gray-200 dark:bg-gray-800 border-t border-gray-200 dark:border-gray-800 sticky text-center bottom-0 ">
      <div className="max-w-7xl mx-auto xs:mr-4 py-6 px-2 sm:px-6 lg:px-8">
        <div className="flex justify-between">
          <div>
            <p className="text-gray-700 dark:text-gray-300">&copy; {new Date().getFullYear()} <Link href='https://simbox.io'>Simbox.io</Link>. All rights reserved.</p>
          </div>
          <div>
            <nav className="flex space-x-4">
              <a href="#" className="text-gray-700 dark:text-gray-300 hover:text-gray-900">
                Terms of Service
              </a>
              <a href="#" className="text-gray-700 dark:text-gray-300 hover:text-gray-900">
                Privacy Policy
              </a>
              <a href="#" className="text-gray-700 dark:text-gray-300 hover:text-gray-900">
                Contact Us
              </a>
            </nav>
          </div>
        </div>
      <div className="text-center text-xs text-gray-800 dark:text-gray-200 mt-4">
        Powered by MCMS from <Link href='https://simbox.io'>Simbox.io</Link>
        <a href="https://github.com/Simbox-io/mcms" target="_blank" rel="noopener noreferrer" className="ml-2 text-gray-500 hover:text-gray-700">
          <svg xmlns="http://www.w3.org/2000/svg" fill="currentColor" className="inline-block w-4 h-4 align-text-bottom" viewBox="0 0 24 24">
            <path fillRule="evenodd" d="M12 2C6.477 2 2 6.477 2 12c0 4.418 2.865 8.166 6.839 9.489.5.09.682-.217.682-.482 0-.237-.009-.866-.014-1.7-2.782.602-3.369-1.34-3.369-1.34-.454-1.156-1.11-1.462-1.11-1.462-.908-.62.069-.608.069-.608 1.003.07 1.532 1.03 1.532 1.03.891 1.529 2.341 1.088 2.914.833.091-.646.349-1.086.635-1.335-2.22-.25-4.555-1.11-4.555-4.943 0-1.091.39-1.984 1.03-2.682-.103-.251-.447-1.265.098-2.634 0 0 .84-.27 2.75 1.02A9.564 9.564 0 0112 7.07c.85.004 1.7.114 2.5.334 1.909-1.29 2.747-1.02 2.747-1.02.546 1.37.202 2.383.1 2.634.64.698 1.028 1.59 1.028 2.682 0 3.841-2.337 4.687-4.565 4.934.359.31.678.92.678 1.852 0 1.335-.012 2.415-.012 2.741 0 .267.18.576.688.479C19.137 20.164 22 16.418 22 12c0-5.523-4.477-10-10-10z"></path>
          </svg>
        </a>
      </div>
      </div>
    </footer>
  );
};

export default Footer;
// components/FileUpload.tsx
'use client';
import React, { useRef, useState } from 'react';
import { motion } from 'framer-motion';
import CheckCircleIcon from './icons/CheckCircleIcon';
import UploadIcon from './icons/UploadIcon';
import PencilIcon from './icons/PencilIcon';
import TrashIcon from './icons/TrashIcon';
import XCircleIcon from './icons/XCircleIcon';

interface FileUploadProps {
  onFileSelect: (files: FileList | null) => void;
  onFileUpload: (files: File[]) => void;
  accept?: string;
  multiple?: boolean;
  className?: string;
  label?: string;
  sublabel?: string;
  buttonLabel?: string;
  dragActiveLabel?: string;
  fileActiveLabel?: string;
  id?: string;
}

const FileUpload: React.FC<FileUploadProps> = ({
  onFileSelect,
  onFileUpload,
  accept = '*',
  multiple = false,
  className = '',
  label = 'Drag and drop files here or',
  sublabel = 'Upload up to 10 files',
  buttonLabel = 'Browse Files',
  dragActiveLabel = 'Drop the files here',
  fileActiveLabel = 'Files uploaded',
  id,
}) => {
  const fileInputRef = useRef<HTMLInputElement>(null);
  const [isDragActive, setIsDragActive] = useState(false);
  const [uploadedFiles, setUploadedFiles] = useState<File[]>([]);

  const handleClick = () => {
    fileInputRef.current?.click();
  };

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = event.target.files;
    if (files) {
      const filesArray = Array.from(files);
      setUploadedFiles((prevFiles) => [...prevFiles, ...filesArray]);
      onFileSelect(files);
    }
  };

  const handleDragEnter = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    setIsDragActive(true);
  };

  const handleDragLeave = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    setIsDragActive(false);
  };

  const handleDragOver = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
  };

  const handleDrop = (event: React.DragEvent<HTMLDivElement>) => {
    event.preventDefault();
    setIsDragActive(false);
    const files = event.dataTransfer.files;
    if (files) {
      const filesArray = Array.from(files);
      setUploadedFiles((prevFiles) => [...prevFiles, ...filesArray]);
      onFileSelect(files);
    }
  };

  const handleRemoveFile = (index: number) => {
    const updatedFiles = [...uploadedFiles];
    updatedFiles.splice(index, 1);
    setUploadedFiles(updatedFiles);
  };

  const handleEditFile = (index: number) => {
    // Implement your file editing logic here
    // You can show a modal or a form to allow users to edit the file details
    console.log(`Editing file at index ${index}`);
  };

  const handleUpload = () => {
    onFileUpload(uploadedFiles);
  };

  const handleClearAll = () => {
    setUploadedFiles([]);
    if (fileInputRef.current) {
      fileInputRef.current.value = '';
    }
  };

  return (
    <div
      className={`relative border-2 bg-white dark:bg-gray-700 border-dashed rounded-lg p-6 flex flex-col items-center justify-center space-y-4 ${
        isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-400 bg-gray-100'
      } ${className}`}
      onDragEnter={handleDragEnter}
      onDragLeave={handleDragLeave}
      onDragOver={handleDragOver}
      onDrop={handleDrop}
    >
      <input
        ref={fileInputRef}
        type="file"
        accept={accept}
        multiple={multiple}
        onChange={handleFileChange}
        className="sr-only"
        id={id}
      />
      <motion.div
        initial={{ opacity: 0, y: -20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="flex flex-col items-center justify-center space-y-2"
      >
        {uploadedFiles.length > 0 ? (
          <>
            <CheckCircleIcon className="w-12 h-12 text-green-500" />
            <p className="text-lg font-medium text-gray-800 dark:text-gray-200">{fileActiveLabel}</p>
          </>
        ) : isDragActive ? (
          <>
            <UploadIcon className="w-12 h-12 text-blue-500" />
            <p className="text-lg font-medium text-gray-800 dark:text-gray-200">{dragActiveLabel}</p>
          </>
        ) : (
          <>
            <UploadIcon className="w-12 h-12 text-gray-500" />
            <p className="text-lg font-medium text-gray-800 dark:text-gray-200">{label}</p>
            <button
              type="button"
              onClick={handleClick}
              className="px-4 py-2 text-sm font-medium text-white bg-blue-500 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              {buttonLabel}
            </button>
            <p className="text-sm text-gray-500 dark:text-gray-400">{sublabel}</p>
          </>
        )}
      </motion.div>
      {uploadedFiles.length > 0 && (
        <motion.div
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ delay: 0.5, duration: 0.5 }}
          className="w-full"
        >
          <ul className="divide-y divide-gray-200">
            {uploadedFiles.map((file, index) => (
              <li key={file.name} className="py-3 flex items-center justify-between">
                <div className="flex items-center space-x-4">
                  <span className="text-gray-900 dark:text-gray-100">{file.name}</span>
                  <span className="text-gray-500 dark:text-gray-400 text-sm">{formatFileSize(file.size)}</span>
                </div>
                <div className="flex items-center space-x-2">
                  <button
                    type="button"
                    onClick={() => handleEditFile(index)}
                    className="text-gray-500 dark:text-gray-200 hover:text-gray-700 dark:hover:text-gray-500 focus:outline-none"
                  >
                    <PencilIcon className="w-5 h-5" />
                  </button>
                  <button
                    type="button"
                    onClick={() => handleRemoveFile(index)}
                    className="text-gray-500 dark:text-gray-200 hover:text-gray-700 dark:hover:text-gray-500 focus:outline-none"
                  >
                    <TrashIcon className="w-5 h-5" />
                  </button>
                </div>
              </li>
            ))}
          </ul>
          <div className="mt-4 flex justify-between">
            <button
              type="button"
              onClick={handleClearAll}
              className="px-4 py-2 text-sm font-medium text-gray-600 bg-gray-200 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-gray-400"
            >
              Clear All
            </button>
            <button
              type="button"
              onClick={handleUpload}
              className="px-4 py-2 text-sm font-medium text-white bg-blue-500 rounded-md hover:bg-blue-600 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
            >
              Upload Files
            </button>
          </div>
        </motion.div>
      )}
    </div>
  );
};

const formatFileSize = (bytes: number, decimals = 2): string => {
  if (bytes === 0) return '0 Bytes';

  const k = 1024;
  const dm = decimals < 0 ? 0 : decimals;
  const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];

  const i = Math.floor(Math.log(bytes) / Math.log(k));

  return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];
};

export default FileUpload;
// components/SpaceTags.tsx
import React from 'react';
import Link from 'next/link';

const SpaceTags: React.FC = () => {
    const tags = [
        { id: 1, name: 'JavaScript' },
    ];

    return (
        <div className="p-4">
            <h2 className="text-xl font-semibold mb-4">Tags</h2>
            <div className="flex flex-wrap gap-2">
                {tags.map((tag) => (
                    <Link
                        key={tag.id}
                        href={`/spaces?tag=${tag.id}`}
                        className="px-2 py-1 bg-gray-200 dark:bg-gray-700 rounded-md text-sm"
                    >
                        {tag.name}
                    </Link>
                ))}
            </div>
        </div>
    );
};

export default SpaceTags;
import React, { useState } from 'react';
import { motion } from 'framer-motion';

interface CategoryFilterProps {
  options: { label: string; icon?: React.ReactNode }[];
  onSelect: (category: string) => void;
  className?: string;
  label?: string;
}

const CategoryFilter: React.FC<CategoryFilterProps> = ({
  options,
  onSelect,
  className = '',
  label = '',
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const [selectedCategory, setSelectedCategory] = useState('');
  const [searchTerm, setSearchTerm] = useState('');

  const handleCategorySelect = (category: string) => {
    setSelectedCategory(category);
    onSelect(category);
    setIsOpen(false);
    setSearchTerm('');
  };

  const filteredOptions = options.filter((option) =>
    option.label.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className={`relative inline-block text-left ${className}`}>
      <label className="block text-sm font-medium text-gray-700 dark:text-gray-200 mb-1">
        {label}
      </label>
      <div>
        <button
          type="button"
          className="inline-flex justify-center w-full rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white dark:bg-gray-800 text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-1 focus:ring-offset-1 focus:ring-blue-500"
          id="category-menu"
          aria-haspopup="true"
          aria-expanded={isOpen}
          onClick={() => setIsOpen(!isOpen)}
        >
          {selectedCategory ? (
            <div className="flex items-center">
              {options.find((option) => option.label === selectedCategory)?.icon}
              <span className="ml-2">{selectedCategory}</span>
            </div>
          ) : (
            <span className="text-gray-500 dark:text-gray-400">Select a category</span>
          )}
          <svg
            className="-mr-1 ml-2 h-5 w-5"
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 20 20"
            fill="currentColor"
            aria-hidden="true"
          >
            <path
              fillRule="evenodd"
              d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
              clipRule="evenodd"
            />
          </svg>
        </button>
      </div>
      {isOpen && (
        <motion.div
          className="origin-top-right absolute right-0 mt-2 w-72 rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 focus:outline-none z-10"
          role="menu"
          aria-orientation="vertical"
          aria-labelledby="category-menu"
          initial={{ opacity: 0, y: -10 }}
          animate={{ opacity: 1, y: 0 }}
          exit={{ opacity: 0, y: -10 }}
          transition={{ duration: 0.2 }}
        >
          <div className="p-2">
            <input
              type="text"
              placeholder="Search categories"
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="block w-full px-4 py-2 text-sm text-gray-700 dark:text-gray-300 placeholder:text-gray-300 bg-gray-100 dark:bg-gray-700 border border-gray-300 dark:border-gray-600 rounded-md focus:outline-none focus:ring-blue-500 focus:border-blue-500"
            />
          </div>
          <div className="py-1" role="none">
            {filteredOptions.map((option) => (
              <button
                key={option.label}
                className={`flex items-center w-full px-4 py-2 text-sm text-gray-700 dark:text-gray-200 hover:bg-gray-100 dark:hover:bg-gray-600 ${
                  selectedCategory === option.label
                    ? 'bg-gray-100 dark:bg-gray-700'
                    : ''
                }`}
                role="menuitem"
                onClick={() => handleCategorySelect(option.label)}
              >
                {option.icon}
                <span className="ml-2">{option.label}</span>
              </button>
            ))}
            {filteredOptions.length === 0 && (
              <div className="px-4 py-2 text-sm text-gray-500 dark:text-gray-400">
                No categories found
              </div>
            )}
          </div>
        </motion.div>
      )}
    </div>
  );
};

export default CategoryFilter;
// components/BookmarkButton.tsx
import React, { useState } from 'react';
import BookmarkIcon from '@/components/icons/BookmarkIcon';

interface BookmarkButtonProps {
  itemId: number;
  itemType: string;
  onBookmark: (itemId: number, itemType: string) => void;
}

const BookmarkButton: React.FC<BookmarkButtonProps> = ({ itemId, itemType, onBookmark }) => {
  const [isBookmarked, setIsBookmarked] = useState(false);

  const handleBookmark = () => {
    setIsBookmarked(!isBookmarked);
    onBookmark(itemId, itemType);
  };

  return (
    <button
      className={`flex items-center ${
        isBookmarked ? 'text-blue-500' : 'text-gray-600 dark:text-gray-400'
      } hover:text-blue-500 dark:hover:text-blue-400`}
      onClick={handleBookmark}
    >
      <BookmarkIcon className="w-5 h-5 mr-1" />
      <span>{isBookmarked ? 'Bookmarked' : 'Bookmark'}</span>
    </button>
  );
};

export default BookmarkButton;
// components/FileGrid.tsx
import React from 'react';
import FileCard from '@/components/FileCard';
import { File } from '@/lib/prisma';

interface FileGridProps {
  files: File[];
}

const FileGrid: React.FC<FileGridProps> = ({ files }) => {
  const handleFileClick = (file: { id: number; name: string; url: string; createdAt: Date }) => {
    // Logic for handling file click (e.g., opening the file in a new tab or downloading it)
  };

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
      {files.map((file) => (
        <FileCard key={file.id} description={file.name} file={file} onClick={() => handleFileClick(file)} />
      ))}
    </div>
  );
};

export default FileGrid;
// components/Dropdown.tsx
'use client';
import React, { useState, useRef, useEffect } from 'react';
import Button from './Button';

interface DropdownProps {
  label: string;
  image?: string;
  options: string[];
  value: string;
  onChange: (value: string) => void;
  className?: string;
  buttonClassName?: string;
  menuClassName?: string;
  menuItemClassName?: string;
  arrowEnabled?: boolean;
}

const Dropdown: React.FC<DropdownProps> = ({
  label,
  image,
  options,
  value,
  onChange,
  className = '',
  buttonClassName = '',
  menuClassName = '',
  menuItemClassName = '',
  arrowEnabled = true,
}) => {
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  const handleToggle = () => {
    setIsOpen(!isOpen);
  };

  const handleSelect = (selectedValue: string) => {
    onChange(selectedValue);
    setIsOpen(false);
  };

  useEffect(() => {
    const handleOutsideClick = (event: MouseEvent) => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
        setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleOutsideClick);

    return () => {
      document.removeEventListener('mousedown', handleOutsideClick);
    };
  }, []);

  return (
    <div ref={dropdownRef} className={`relative inline-block text-left ${className}`}>
      <Button variant="dropdown" onClick={handleToggle} className={`${buttonClassName} flex items-center px-4`} size='dropdown'>
        {value || label}
        {image && <img src={image} alt={label} className="h-8 w-8 ml-2 rounded-full" />}
        {arrowEnabled && (
            <svg
                className="-mr-1 ml-2 h-5 w-5"
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 20 20"
                fill="currentColor"
                aria-hidden="true"
            >
              <path
                  fillRule="evenodd"
                  d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
                  clipRule="evenodd"
              />
            </svg>
        )}
      </Button>
      {
        isOpen && (
          <div
            className={`origin-top-right absolute right-0 mt-2 w-56 rounded-md shadow-xl bg-gray-100 dark:bg-gray-700 ring-1 ring-black ring-opacity-5 focus:outline-none ${menuClassName}`}
            role="menu"
            aria-orientation="vertical"
            aria-labelledby="options-menu"
          >
            <div className="py-1" role="none">
              {options.map((option) => (
                <button
                  key={option}
                  className={`block w-full text-left px-4 py-2 text-sm hover:bg-gray-200 dark:hover:bg-gray-500 ${option === value
                    ? 'bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white'
                    : 'text-gray-700 dark:text-gray-200'
                    } ${menuItemClassName}`}
                  role="menuitem"
                  onClick={() => handleSelect(option)}
                >
                  {option}
                </button>
              ))}
            </div>
          </div>
        )
      }
    </div >
  );
};

export default Dropdown;
// components/Avatar.tsx
import React from 'react';

interface AvatarProps {
  src?: string;
  alt?: string;
  size?: 'small' | 'medium' | 'large';
  shape?: 'circle' | 'square';
  className?: string;
  style?: React.CSSProperties;
  initials?: string;
  initialsClassName?: string;
  onClick?: () => void;
}

const Avatar: React.FC<AvatarProps> = ({
  src,
  alt = '',
  size = 'medium',
  shape = 'circle',
  className = '',
  style,
  initials,
  initialsClassName = '',
  onClick,
}) => {
  const getSizeClasses = () => {
    switch (size) {
      case 'small':
        return 'w-8 h-8 text-sm';
      case 'medium':
        return 'w-12 h-12 text-base';
      case 'large':
        return 'w-16 h-16 text-xl';
      default:
        return 'w-12 h-12 text-base';
    }
  };

  const getShapeClasses = () => {
    return shape === 'circle' ? 'rounded-full' : 'rounded';
  };

  const renderAvatar = () => {
    if (src) {
      return (
        <img
          src={src}
          alt={alt}
          className={`${getSizeClasses()} ${getShapeClasses()} object-cover ${className}`}
          style={style}
          onClick={onClick}
        />
      );
    } else if (initials) {
      return (
        <div
          className={`${getSizeClasses()} ${getShapeClasses()} flex items-center justify-center bg-gray-200 text-gray-600 font-semibold ${initialsClassName}`}
          style={style}
          onClick={onClick}
        >
          {initials}
        </div>
      );
    } else {
      return (
        <div
          className={`${getSizeClasses()} ${getShapeClasses()} flex items-center justify-center bg-gray-200 text-gray-600 ${className}`}
          style={style}
          onClick={onClick}
        >
          <UserIcon className="w-2/3 h-2/3" />
        </div>
      );
    }
  };

  return renderAvatar();
};

const UserIcon: React.FC<{ className?: string }> = ({ className }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    className={`${className}`}
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M16 7a4 4 0 11-8 0 4 4 0 018 0zm-4 7a7 7 0 00-7 7h14a7 7 0 00-7-7z"
    />
  </svg>
);

export default Avatar;
// components/AISearch.tsx
import React, { useState } from 'react';
import Input from '../Input';
import Button from '../Button';
import SearchResults from './SearchResults';
import AIIcon from '../icons/AIIcon';
const AISearch: React.FC = () => {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);
  const [isLoading, setIsLoading] = useState(false);
  const handleSearch = async () => {
    setIsLoading(true);
    // Make API call to AI-powered search endpoint
    const response = await fetch(`/api/search?q=${encodeURIComponent(query)}`);
    const data = await response.json();
    setResults(data);
    setIsLoading(false);
  };
  return (
    <div className="ai-search">
      <div className="search-input-container flex items-center bg-white rounded-lg shadow-md p-4">
        <AIIcon className="w-6 h-6 text-blue-500 mr-2" />
        <Input
          name="search"
          id="search"
          type="text"
          value={query}
          onChange={(e) => setQuery(e.target.value)}
          placeholder="Ask me anything..."
          className="search-input flex-grow mr-4 border-0 focus:ring-0"
        />
        <Button onClick={handleSearch} disabled={isLoading} className="search-button bg-blue-500 text-white px-4 py-2 rounded-lg">
          {isLoading ? 'Searching...' : 'Search'}
        </Button>
      </div>
      {results.length > 0 && (
        <div className="search-results mt-6">
          <h2 className="text-xl font-semibold mb-4">Search Results</h2>
          <SearchResults results={results} />
        </div>
      )}
    </div>
  );
};
export default AISearch;
// components/AIWritingAssistant.tsx
import React, { useState } from 'react';
import Textarea from '../Textarea';
import Button from '../Button';
import Spinner from '../Spinner';
import Tooltip from '../Tooltip';
const AIWritingAssistant: React.FC = () => {
  const [content, setContent] = useState('');
  const [suggestions, setSuggestions] = useState<string[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const handleAnalyze = async () => {
    setIsLoading(true);
    // Make API call to get writing suggestions and corrections
    const response = await fetch('/api/analyzeWriting', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ content }),
    });
    const data = await response.json();
    setSuggestions(data.suggestions);
    setIsLoading(false);
  };
  const handleSuggestionClick = (suggestion: string) => {
    // Apply the clicked suggestion to the content
    setContent((prevContent) => prevContent + ' ' + suggestion);
  };
  return (
    <div className="ai-writing-assistant">
      <Textarea
        value={content}
        onChange={(e) => setContent(e)}
        placeholder="Start writing..."
        className="writing-input border border-gray-300 rounded-lg p-4 mb-4 focus:outline-none focus:ring-2 focus:ring-blue-500"
      />
      <Button onClick={handleAnalyze} disabled={isLoading} className="analyze-button bg-blue-500 text-white px-4 py-2 rounded-lg mb-4">
        {isLoading ? <Spinner size="small" /> : 'Analyze'}
      </Button>
      {suggestions.length > 0 && (
        <div className="suggestion-list bg-gray-100 rounded-lg p-4">
          <h3 className="suggestion-title text-lg font-semibold mb-2">Suggestions</h3>
          {suggestions.map((suggestion, index) => (
            <Tooltip key={index} content="Click to apply suggestion">
              <div
                className="suggestion-item bg-white text-gray-800 rounded-lg px-3 py-2 mb-2 cursor-pointer hover:bg-blue-500 hover:text-white transition duration-200"
                onClick={() => handleSuggestionClick(suggestion)}
              >
                {suggestion}
              </div>
            </Tooltip>
          ))}
        </div>
      )}
    </div>
  );
};
export default AIWritingAssistant;
// components/Tag.tsx
import React from 'react';
interface TagProps {
  label: string;
  onClick?: () => void;
  className?: string;
}
const Tag: React.FC<TagProps> = ({ label, onClick, className }) => {
  return (
    <span
      className={`inline-block bg-gray-200 text-gray-800 rounded-full px-3 py-1 text-sm font-semibold mr-2 mb-2 cursor-pointer hover:bg-gray-300 ${className}`}
      onClick={onClick}
    >
      {label}
    </span>
  );
};
export default Tag;
// components/SearchResults.tsx
import React from 'react';
import Card from '../Card';
import Avatar from '../Avatar';
import Badge from '../Badge';
interface SearchResult {
  id: string;
  title: string;
  description: string;
  author: {
    id: string;
    name: string;
    avatar: string;
  };
  tags: string[];
  url: string;
}
interface SearchResultsProps {
  results: SearchResult[];
}
const SearchResults: React.FC<SearchResultsProps> = ({ results }) => {
  return (
    <div className="search-results space-y-4">
      {results.map((result) => (
        <Card key={result.id} className="bg-white rounded-lg shadow-md p-4">
          <div className="flex items-center mb-4">
            <Avatar src={result.author.avatar} alt={result.author.name} size="small" />
            <span className="ml-2 font-semibold">{result.author.name}</span>
          </div>
          <h3 className="text-xl font-semibold mb-2">
            <a href={result.url} className="text-blue-500 hover:underline">
              {result.title}
            </a>
          </h3>
          <p className="text-gray-600 mb-4">{result.description}</p>
          <div className="flex flex-wrap">
            {result.tags.map((tag) => (
              <Badge key={tag} className="bg-blue-100 text-blue-800 rounded-full px-3 py-1 mr-2 mb-2">
                {tag}
              </Badge>
            ))}
          </div>
        </Card>
      ))}
    </div>
  );
};
export default SearchResults;
// components/AIButton.tsx
import React from 'react';
import Button from '../Button';
import AIIcon from '../icons/AIIcon';
interface AIButtonProps {
  onClick: () => void;
  disabled?: boolean;
  className?: string;
}
const AIButton: React.FC<AIButtonProps> = ({ onClick, disabled = false, className = '' }) => {
  return (
    <Button
      onClick={onClick}
      disabled={disabled}
      className={`flex items-center ${className}`}
      variant="primary"
    >
      <AIIcon className="w-5 h-5 mr-2" />
      <span>AI Assist</span>
    </Button>
  );
};
export default AIButton;
// components/ContentModerationAlert.tsx
'use client'
import React, { useState, useEffect } from 'react';
import Alert from '../Alert';
import WarningIcon from '../icons/WarningIcon';
interface ContentModerationAlertProps {
  content: string;
}
const ContentModerationAlert: React.FC<ContentModerationAlertProps> = ({ content }) => {
  const [showAlert, setShowAlert] = useState(false);
  useEffect(() => {
    const checkContentModeration = async () => {
      // Make API call to check content moderation
      const response = await fetch('/api/checkContentModeration', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ content }),
      });
      const data = await response.json();
      setShowAlert(data.flagged);
    };
    checkContentModeration();
  }, [content]);
  if (!showAlert) {
    return null;
  }
  return (
    <Alert
      variant="warning"
      onClose={() => setShowAlert(false)}
      className="bg-yellow-100 text-yellow-800 border border-yellow-300 rounded-lg p-4 mb-4"
    >
      <div className="flex items-center">
        <WarningIcon className="w-6 h-6 mr-2" />
        <p>
          The content you entered may contain inappropriate or offensive language. Please
          review and modify it before proceeding.
        </p>
      </div>
    </Alert>
  );
};
export default ContentModerationAlert;
// components/SuggestedTags.tsx
import React, { useState, useEffect } from 'react';
import Tag from './Tag';
interface SuggestedTagsProps {
  content: string;
  onTagSelect: (tag: string) => void;
}
const SuggestedTags: React.FC<SuggestedTagsProps> = ({ content, onTagSelect }) => {
  const [suggestedTags, setSuggestedTags] = useState<string[]>([]);
  useEffect(() => {
    const fetchSuggestedTags = async () => {
      // Make API call to get suggested tags based on content
      const response = await fetch('/api/suggestTags', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ content }),
      });
      const data = await response.json();
      setSuggestedTags(data.tags);
    };
    fetchSuggestedTags();
  }, [content]);
  return (
    <div className="suggested-tags bg-gray-100 rounded-lg p-4">
      <h3 className="suggested-tags-title text-lg font-semibold mb-2">Suggested Tags</h3>
      <div className="tag-list flex flex-wrap">
        {suggestedTags.map((tag) => (
          <Tag
            key={tag}
            label={tag}
            onClick={() => onTagSelect(tag)}
            className="tag-item bg-white text-gray-800 rounded-full px-3 py-1 mr-2 mb-2 cursor-pointer hover:bg-blue-500 hover:text-white transition duration-200"
          />
        ))}
      </div>
    </div>
  );
};
export default SuggestedTags;
// components/MembersList.tsx
import React from 'react';
import Avatar from '@/components/Avatar';
import Button from '@/components/Button';
import Tooltip from '@/components/Tooltip';

interface MembersListProps {
    members: {
        id: number;
        username: string;
        avatar: string;
    }[];
    onRemoveMember: (memberId: number) => void;
}

const MembersList: React.FC<MembersListProps> = ({ members, onRemoveMember }) => {
    return (
        <ul className="space-y-4">
            {members.map((member) => (
                <li key={member.id} className="flex items-center justify-between">
                    <div className="flex items-center">
                        <Avatar src={member.avatar} alt={member.username} size="medium" />
                        <span className="ml-2 font-semibold">{member.username}</span>
                    </div>
                    <Tooltip content="Remove member">
                        <Button variant="danger" onClick={() => onRemoveMember(member.id)}>
                            Remove
                        </Button>
                    </Tooltip>
                </li>
            ))}
        </ul>
    );
};

export default MembersList;
// components/ThemeToggle.tsx
'use client';
import { useTheme } from 'next-themes';

const ThemeToggle = () => {
  const { theme, setTheme } = useTheme();

  const toggleTheme = () => {
    setTheme(theme === 'light' ? 'dark' : 'light');
  };

  return (
    <button
      className="p-2 rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-offset-gray-100 focus:ring-blue-500"
      onClick={toggleTheme}
    >
      {theme === 'light' ? (
        <span className="h-6 w-6 text-gray-700">Dark</span>
      ) : (
        <span className="h-6 w-6 text-yellow-400">Light</span>
      )}
    </button>
  );
};

export default ThemeToggle;
// components/icons/PlugIcon.tsx

import React from 'react';

const PlugIcon: React.FC = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6">
      <path d="M12 1.5a.75.75 0 0 1 .75.75V7.5h-1.5V2.25A.75.75 0 0 1 12 1.5zM11.25 7.5v5.69l-1.72-1.72a.75.75 0 0 0-1.06 1.06l3 3a.75.75 0 0 0 1.06 0l3-3a.75.75 0 1 0-1.06-1.06l-1.72 1.72V7.5h3.75a3 3 0 0 1 3 3v9a3 3 0 0 1-3 3h-9a3 3 0 0 1-3-3v-9a3 3 0 0 1 3-3h3.75z" />
    </svg>
  );
};

export default PlugIcon;
// components/icons/CheckCircleIcon.tsx
import React from 'react';

const CheckCircleIcon: React.FC<{ className?: string }> = ({ className }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      className={className}
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={2}
        d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"
      />
    </svg>
  );
};

export default CheckCircleIcon;
// components/icons/ShareIcon.tsx
import React from 'react';

const ShareIcon: React.FC<{ className?: string }> = ({ className }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      className={className}
    >
      <circle cx="18" cy="5" r="3" />
      <circle cx="6" cy="12" r="3" />
      <circle cx="18" cy="19" r="3" />
      <line x1="8.59" y1="13.51" x2="15.42" y2="17.49" />
      <line x1="15.41" y1="6.51" x2="8.59" y2="10.49" />
    </svg>
  );
};

export default ShareIcon;
const SearchIconSVG: React.FC = () => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <circle cx="11" cy="11" r="8" />
      <line x1="21" y1="21" x2="16.65" y2="16.65" />
    </svg>
  );
  
  export default SearchIconSVG;
// components/icons/BookmarkIcon.tsx
import React from 'react';

const BookmarkIcon: React.FC<{ className?: string }> = ({ className }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      className={className}
    >
      <path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z" />
    </svg>
  );
};

export default BookmarkIcon;
// components/icons/BellIcon.tsx
import React from 'react';

const BellIcon: React.FC<{ className?: string }> = ({ className }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      className={className}
    >
      <path d="M18 8A6 6 0 0 0 6 8c0 7-3 9-3 9h18s-3-2-3-9" />
      <path d="M13.73 21a2 2 0 0 1-3.46 0" />
    </svg>
  );
};

export default BellIcon;
const ChevronRightSVG: React.FC = () => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <path d="M9 18l6-6-6-6" />
    </svg>
  );
  
  export default ChevronRightSVG;
// components/icons/CloudUploadIcon.tsx

import React from 'react';

const CloudUploadIcon: React.FC = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6">
      <path d="M7 16a4 4 0 0 1-.88-7.903A5 5 0 1 1 15.9 6h.1a5 5 0 0 1 1 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
    </svg>
  );
};

export default CloudUploadIcon;
// components/icons/AIIcon.tsx
import React from 'react';
const AIIcon: React.FC<{ className?: string }> = ({ className }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      className={className}
    >
      <path d="M21 11.5a8.5 8.5 0 0 1-8.5 8.5M21 11.5a8.5 8.5 0 0 0-8.5-8.5M21 11.5H3M12 20v-8.5" />
    </svg>
  );
};
export default AIIcon;
// components/icons/CodeBranchIcon.tsx

import React from 'react';

const CodeBranchIcon: React.FC = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6">
      <path fillRule="evenodd" d="M11.097 1.515a.75.75 0 0 1 .589.882L10.666 7.5h4.47l1.079-5.397a.75.75 0 1 1 1.47.294L16.665 7.5h3.585a.75.75 0 0 1 0 1.5h-3.885l-1.2 6h3.585a.75.75 0 0 1 0 1.5h-3.885l-1.08 5.397a.75.75 0 1 1-1.47-.294l1.02-5.103h-4.47l-1.08 5.397a.75.75 0 0 1-1.47-.294l1.02-5.103H3.75a.75.75 0 1 1 0-1.5h3.885l1.2-6H5.25a.75.75 0 0 1 0-1.5h3.885l1.08-5.397a.75.75 0 0 1 .882-.588zM10.365 9l-1.2 6h4.47l1.2-6h-4.47z" clipRule="evenodd" />
    </svg>
  );
};

export default CodeBranchIcon;
// components/icons/UsersIcon.tsx

import React from 'react';

const UsersIcon: React.FC = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6">
      <path d="M4.5 6.375a4.125 4.125 0 1 1 8.25 0 4.125 4.125 0 0 1-8.25 0zm9.75 2.25a3.375 3.375 0 1 1 6.75 0 3.375 3.375 0 0 1-6.75 0zM1.5 19.125a7.125 7.125 0 0 1 14.25 0v.003l-.001.119a.75.75 0 0 1-.363.63 13.067 13.067 0 0 1-6.761 1.873c-2.472 0-4.786-.684-6.76-1.873a.75.75 0 0 1-.364-.63l-.001-.122zM17.25 19.128l-.001.144a2.25 2.25 0 0 1-.233.96 10.088 10.088 0 0 0 5.06-1.01.75.75 0 0 0 .42-.643 4.875 4.875 0 0 0-6.957-4.611 8.586 8.586 0 0 1 1.71 5.157v.003z" />
    </svg>
  );
};

export default UsersIcon;
// components/icons/EyeIcon.tsx
import React from 'react';

const EyeIcon: React.FC<{ className?: string }> = ({ className }) => {
    return (
        <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            className={className}
        >
            <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
            <circle cx="12" cy="12" r="3"></circle>
        </svg>
    );
};

export default EyeIcon;
// components/icons/TrashIcon.tsx
import React from 'react';

const TrashIcon: React.FC<{ className?: string }> = ({ className }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      className={className}
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={2}
        d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"
      />
    </svg>
  );
};

export default TrashIcon;
// components/icons/BadgeIcon.tsx
import React from 'react';

const BadgeIcon: React.FC<{ className?: string }> = ({ className }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      className={className}
    >
      <circle cx="12" cy="8" r="7" />
      <polyline points="8.21 13.89 7 23 12 20 17 23 15.79 13.88" />
    </svg>
  );
};

export default BadgeIcon;
const ChevronLeftSVG: React.FC = () => (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
      <path d="M15 18l-6-6 6-6" />
    </svg>
  );
  
  export default ChevronLeftSVG;
// components/icons/CommentsIcon.tsx

import React from 'react';

const CommentsIcon: React.FC = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6">
      <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z" />
    </svg>
  );
};

export default CommentsIcon;
// components/icons/XCircleIcon.tsx
import React from 'react';

const XCircleIcon: React.FC<{ className?: string }> = ({ className }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      className={className}
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={2}
        d="M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z"
      />
    </svg>
  );
};

export default XCircleIcon;
// components/icons/ChartBarIcon.tsx

import React from 'react';

const ChartBarIcon: React.FC = () => {
  return (
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="currentColor" className="w-6 h-6">
      <path d="M18.375 2.25c-1.035 0-1.875.84-1.875 1.875v15.75c0 1.035.84 1.875 1.875 1.875h.75c1.035 0 1.875-.84 1.875-1.875V4.125c0-1.036-.84-1.875-1.875-1.875h-.75zM9.75 8.625c0-1.036.84-1.875 1.875-1.875h.75c1.036 0 1.875.84 1.875 1.875v11.25c0 1.035-.84 1.875-1.875 1.875h-.75a1.875 1.875 0 0 1-1.875-1.875V8.625zM3 13.125c0-1.036.84-1.875 1.875-1.875h.75c1.036 0 1.875.84 1.875 1.875v6.75c0 1.035-.84 1.875-1.875 1.875h-.75A1.875 1.875 0 0 1 3 19.875v-6.75z" />
    </svg>
  );
};

export default ChartBarIcon;
// components/icons/LeaderboardIcon.tsx
import React from 'react';

const LeaderboardIcon: React.FC<{ className?: string }> = ({ className }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      className={className}
    >
      <path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2" />
      <circle cx="8.5" cy="7" r="4" />
      <polyline points="17 11 19 13 23 9" />
    </svg>
  );
};

export default LeaderboardIcon;
// components/icons/WarningIcon.tsx
import React from 'react';
const WarningIcon: React.FC<{ className?: string }> = ({ className }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
      className={className}
    >
      <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z" />
      <line x1="12" y1="9" x2="12" y2="13" />
      <line x1="12" y1="17" x2="12.01" y2="17" />
    </svg>
  );
};
export default WarningIcon;
// components/icons/UploadIcon.tsx
import React from 'react';

const UploadIcon: React.FC<{ className?: string }> = ({ className }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      className={className}
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={2}
        d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12"
      />
    </svg>
  );
};

export default UploadIcon;
// components/icons/ThumbUpIcon.tsx
import React from 'react';

const ThumbUpIcon: React.FC<{ className?: string }> = ({ className }) => {
    return (
        <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
            className={className}
        >
            <path d="M14 9V5a3 3 0 0 0-3-3l-4 9v11h11.28a2 2 0 0 0 2-1.7l1.38-9a2 2 0 0 0-2-2.3zM7 22H4a2 2 0 0 1-2-2v-7a2 2 0 0 1 2-2h3"></path>
        </svg>
    );
};

export default ThumbUpIcon;
// components/icons/PencilIcon.tsx
import React from 'react';

const PencilIcon: React.FC<{ className?: string }> = ({ className }) => {
  return (
    <svg
      xmlns="http://www.w3.org/2000/svg"
      className={className}
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        strokeLinecap="round"
        strokeLinejoin="round"
        strokeWidth={2}
        d="M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z"
      />
    </svg>
  );
};

export default PencilIcon;
// components/NotificationDropdown.tsx
import React, { useState, useEffect } from 'react';
import { Notification } from '@/lib/prisma';
import { FiBell } from 'react-icons/fi';
import { formatDistanceToNow } from 'date-fns';

const NotificationDropdown: React.FC = () => {
  const [notifications, setNotifications] = useState<Notification[]>([]);
  const [isOpen, setIsOpen] = useState(false);

  useEffect(() => {
    const fetchNotifications = async () => {
      try {
        const response = await fetch('/api/notifications');
        if (response.ok) {
          const data = await response.json();
          setNotifications(data.notifications);
        } else {
          console.error('Error fetching notifications:', response.statusText);
        }
      } catch (error) {
        console.error('Error fetching notifications:', error);
      }
    };

    fetchNotifications();
  }, []);

  const toggleDropdown = () => {
    setIsOpen(!isOpen);
  };

  const markAsRead = async (notificationId: number) => {
    try {
      const response = await fetch(`/api/notifications/${notificationId}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ read: true }),
      });

      if (response.ok) {
        setNotifications((prevNotifications) =>
          prevNotifications.map((notification) =>
            notification.id === notificationId ? { ...notification, read: true } : notification
          )
        );
      } else {
        console.error('Error marking notification as read:', response.statusText);
      }
    } catch (error) {
      console.error('Error marking notification as read:', error);
    }
  };

  return (
    <div className="relative">
      <button
        className="flex items-center focus:outline-none"
        onClick={toggleDropdown}
      >
        <FiBell className="text-2xl" />
        {notifications.filter((notification) => !notification.read).length > 0 && (
          <span className="absolute top-0 right-0 h-2 w-2 bg-red-500 rounded-full"></span>
        )}
      </button>
      {isOpen && (
        <div className="absolute right-0 mt-2 w-80 bg-white rounded-md shadow-lg z-10">
          <div className="p-4">
            <h3 className="text-lg font-semibold mb-4">Notifications</h3>
            {notifications.length === 0 ? (
              <p>No notifications found.</p>
            ) : (
              <ul className="space-y-2">
                {notifications.map((notification) => (
                  <li
                    key={notification.id}
                    className={`p-2 rounded-md ${
                      notification.read ? 'bg-gray-100' : 'bg-white'
                    }`}
                  >
                    <div className="flex justify-between items-center">
                      <span>{notification.message}</span>
                      {!notification.read && (
                        <button
                          className="text-sm text-blue-500 hover:underline"
                          onClick={() => markAsRead(notification.id)}
                        >
                          Mark as Read
                        </button>
                      )}
                    </div>
                    <p className="text-sm text-gray-500">
                      {formatDistanceToNow(new Date(notification.createdAt))} ago
                    </p>
                  </li>
                ))}
              </ul>
            )}
          </div>
          <div className="p-4 bg-gray-100">
            <button className="text-sm text-blue-500 hover:underline">
              Notification Settings
            </button>
          </div>
        </div>
      )}
    </div>
  );
};

export default NotificationDropdown;
// components/ShareButton.tsx
import React from 'react';
import ShareIcon from '@/components/icons/ShareIcon';

interface ShareButtonProps {
  itemId: number;
  itemType: string;
}

const ShareButton: React.FC<ShareButtonProps> = ({ itemId, itemType }) => {
  const handleShare = () => {
    // Implement the share functionality here
    console.log(`Sharing ${itemType} with ID ${itemId}`);
  };

  return (
    <button
      className="flex items-center text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-gray-200"
      onClick={handleShare}
    >
      <ShareIcon className="w-5 h-5 mr-1" />
      <span>Share</span>
    </button>
  );
};

export default ShareButton;
'use client';
import React, {useEffect, useRef, useState} from 'react';
import Link from 'next/link';
import {signOut, useSession} from 'next-auth/react';
import {useRouter} from 'next/navigation';
import {User} from '@/lib/prisma';
import Dropdown from './Dropdown';
import Button from './Button';
import SearchBar from "@/components/SearchBar";
import Skeleton from './Skeleton';
import { SearchResult } from "@/components/SearchBar";

const Header: React.FC = () => {
  const router = useRouter();
  const { data: session, status } = useSession();
  const [searchTerm, setSearchTerm] = useState('');
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [isSearchOpen, setIsSearchOpen] = useState(false);
  const [buttonClicked, setButtonClicked] = useState(false);
  const menuRef = useRef<HTMLDivElement>(null);
  const searchRef = useRef<HTMLDivElement>(null);
  const user = session?.user as User;

  const handleLogout = async () => {
    await signOut();
    router.push('/login');
  };

  const handleSearch = async (e: React.FormEvent) => {
    e.preventDefault();
    if (searchTerm.trim() !== '') {
      router.push(`/search?q=${encodeURIComponent(searchTerm)}`);
    }
  };

  const handleButtonClick = (setStateFunction: React.Dispatch<React.SetStateAction<boolean>>) => {
    setButtonClicked(true);
    setStateFunction((prevState) => !prevState);
  };

  const handleClickOutside = (event: MouseEvent) => {
    if (buttonClicked) {
      if (
        menuRef.current &&
        !menuRef.current.contains(event.target as Node)
      ) {
        setIsMenuOpen(false);
      }
      if (
        searchRef.current &&
        !searchRef.current.contains(event.target as Node)
      ) {
        setIsSearchOpen(false);
      }
    }
    setButtonClicked(false);
  };

  useEffect(() => {
    document.addEventListener('mouseup', handleClickOutside);
    return () => {
      document.removeEventListener('mouseup', handleClickOutside);
    };
  }, [buttonClicked]);

  return (
      <header className="bg-white dark:bg-gray-800 shadow z-10">
      <div className="max-w-8xl mx-auto px-4 sm:px-6 lg:px-12">
        <div className="flex justify-between items-center h-16">
          <div className="flex items-center">
            <img src="/logo.png" alt="MCMS" className="h-16 w-16" />
            <Link href="/">
              <span className="text-xl font-bold text-blue-600 dark:text-blue-400">MCMS</span>
            </Link>
            <nav className="hidden md:ml-10 md:flex md:space-x-1 xl:space-x-6">
              <Button
                variant="dropdown"
                size="medium"
                onClick={() => router.push('/explore')}
                className="text-gray-500 hover:text-gray-900 dark:text-gray-100 dark:hover:text-gray-500 rounded-md text-sm font-medium flex items-center"
              >
                Explore
              </Button>
              <Button
                  variant="dropdown"
                  size="medium"
                  onClick={() => router.push('/explore/posts')}
                  className="hidden ml-4 md:block text-gray-500 hover:text-gray-900 dark:text-gray-100 dark:hover:text-gray-500 rounded-md text-sm font-medium flex items-center"
              >
                News
              </Button>
              <Dropdown
                  label="Projects"
                  options={['All Projects', 'Trending', 'Recent', 'My Project 1']}
                  value=""
                  onChange={(value) => router.push(`/projects/${value.toLowerCase().replace(' ', '-')}`)}
                  className="ml-4"
                  buttonClassName="text-gray-500 hover:text-gray-900 dark:text-gray-100 dark:hover:text-gray-500 px-2 py-2 rounded-md text-sm font-medium flex items-center"
                  menuClassName="mt-2"
              />
              <Dropdown
                label="Files"
                options={['All Files', 'Trending', 'Shared with Me', 'Recent']}
                value=""
                onChange={(value) => router.push(`/files/${value.toLowerCase().replace(' ', '-')}`)}
                className="ml-4"
                buttonClassName="text-gray-500 hover:text-gray-900 dark:text-gray-100 dark:hover:text-gray-500 px-2 py-2 rounded-md text-sm font-medium flex items-center"
                menuClassName="mt-2"
              />
              <Dropdown
                  label="Spaces"
                  options={['All', 'Trending', 'Recent', 'Wiki 1', 'Wiki 2']}
                value=""
                  onChange={(value) => router.push(`/spaces/${value.toLowerCase().replace(' ', '-')}`)}
                className="ml-4"
                buttonClassName="text-gray-500 hover:text-gray-900 dark:text-gray-100 dark:hover:text-gray-500 px-2 py-2 rounded-md text-sm font-medium flex items-center"
                menuClassName="mt-2"
              />
            </nav>
          </div>
          <div className="flex items-center">
            <button
              className="lg:hidden text-gray-500 hover:text-gray-900 dark:text-gray-100 dark:hover:text-gray-500 focus:outline-none"
              onClick={() => handleButtonClick(setIsSearchOpen)}
            >
              <svg
                className="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"
                />
              </svg>
            </button>
            <div className="hidden flex-grow lg:block w-full">
                  <SearchBar onSearch={() => handleSearch} value={searchTerm} onChange={setSearchTerm}  />
            </div>
            {status === 'loading' ? (
              <Skeleton variant="rectangular" width='40' height='40' className="ml-4" />
            ) : session ? (
                <div className="relative flex items-center">
                <Dropdown
                  label={user?.username || ''}
                  image={user?.avatar || ''}
                  options={
                    user?.role === 'ADMIN'
                      ? ['Dashboard', 'Analytics', 'Reports', 'Profile', 'Settings', 'Admin', 'Logout']
                      : ['Dashboard', 'Analytics', 'Reports', 'Profile', 'Settings', 'Logout']
                  }
                  value=""
                  onChange={(value) => {
                    if (value === 'Logout') {
                      handleLogout();
                    } else {
                      router.push(`/${value.toLowerCase()}`);
                    }
                  }}
                  className="ml-4"
                  buttonClassName="z-1 mx-4 text-gray-500 hover:text-gray-900 dark:text-gray-100 dark:hover:text-gray-500 px-0 py-2 rounded-md text-sm font-medium flex items-left "
                  menuClassName="mt-8"
                  arrowEnabled={false}
                />
              </div>

            ) : (
              <>
                <Link href="/login">
                  <span
                      className="text-white hover:text-gray-900 px-3 py-2 rounded-md text-sm font-medium mx-4 bg-gray-500">
                    Login
                  </span>
                </Link>
                <Link href="/register">
                  <span className="text-white bg-blue-600 hover:bg-blue-700 dark:bg-blue-500 dark:hover:bg-blue-600 px-3 py-2 rounded-md text-sm font-medium">
                    Register
                  </span>
                </Link>
              </>
            )}
            <button
              className="ml-4 md:hidden text-gray-500 hover:text-gray-900 dark:text-gray-100 dark:hover:text-gray-500 focus:outline-none"
              onClick={() => handleButtonClick(setIsMenuOpen)}
            >
              <svg
                className="h-6 w-6"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                {isMenuOpen ? (
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M6 18L18 6M6 6l12 12"
                  />
                ) : (
                  <path
                    strokeLinecap="round"
                    strokeLinejoin="round"
                    strokeWidth={2}
                    d="M4 6h16M4 12h16M4 18h16"
                  />
                )}
              </svg>
            </button>
          </div>
        </div>
      </div>
      {isMenuOpen && (
        <div ref={menuRef} className="md:hidden">
          <div className="px-2 pt-2 pb-3 space-y-1 sm:px-3 mr-2">
            <Link href="/explore">
              <span
                className="text-gray-500 hover:text-gray-900 dark:text-gray-100 dark:hover:text-gray-500 block text-left px-3 py-2 rounded-md text-base font-medium text-right"
                onClick={() => setIsMenuOpen(false)}
              >
                Home
              </span>
            </Link>
            <Dropdown
              label="Files"
              options={['All Files', 'Shared with Me', 'Recent']}
              value=""
              onChange={(value) => {
                router.push(`/files/${value.toLowerCase().replace(' ', '-')}`);
                setIsMenuOpen(false);
              }}
              className="block w-full"
              buttonClassName="text-gray-500 hover:text-gray-900 dark:text-gray-100 dark:hover:text-gray-500 px-3 py-2 rounded-md text-base font-medium justify-end"
              menuClassName="mt-2 z-10"
            />
            <Dropdown
              label="Projects"
              options={['Project 1', 'Project 2', 'Project 3']}
              value=""
              onChange={(value) => {
                router.push(`/projects/${value.toLowerCase().replace(' ', '-')}`);
                setIsMenuOpen(false);
              }}
              className="block w-full"
              buttonClassName="text-gray-500 hover:text-gray-900 dark:text-gray-100 dark:hover:text-gray-500 px-3 py-2 rounded-md text-base font-medium justify-end"
              menuClassName="mt-2 z-10"
            />
            <Dropdown
              label="Wikis"
              options={['Wiki 1', 'Wiki 2', 'Wiki 3']}
              value=""
              onChange={(value) => {
                router.push(`/wikis/${value.toLowerCase().replace(' ', '-')}`);
                setIsMenuOpen(false);
              }}
              className="block w-full"
              buttonClassName="text-gray-500 hover:text-gray-900 dark:text-gray-100 dark:hover:text-gray-500 px-3 py-2 rounded-md text-base font-medium justify-end"
              menuClassName="mt-2 z-10"
            />
          </div>
        </div>
      )}
      {isSearchOpen && (
        <div ref={searchRef} className="px-4 py-2">
         <SearchBar onSearch={() => handleSearch} />
        </div>
      )}
    </header>
  );
};

export default Header;
// components/MasonryGrid.tsx
import React, { useEffect, useRef, useState } from 'react';

interface MasonryGridProps {
  items: React.ReactNode[];
  columnWidth?: number;
  gap?: number;
}

const MasonryGrid: React.FC<MasonryGridProps> = ({ items, columnWidth = 300, gap = 20 }) => {
  const gridRef = useRef<HTMLDivElement>(null);
  const [numColumns, setNumColumns] = useState(1);

  useEffect(() => {
    const updateLayout = () => {
      if (gridRef.current) {
        const width = gridRef.current.offsetWidth;
        const calculatedColumns = Math.floor(width / (columnWidth + gap));
        setNumColumns(calculatedColumns);
      }
    };

    updateLayout();
    window.addEventListener('resize', updateLayout);

    return () => {
      window.removeEventListener('resize', updateLayout);
    };
  }, [columnWidth, gap]);

  const getColumnStyles = () => {
    return {
      gridTemplateColumns: `repeat(${numColumns}, 1fr)`,
      gap: `${gap}px`,
    };
  };

  return (
    <div ref={gridRef} className="masonry-grid" style={getColumnStyles()}>
      {items.map((item, index) => (
        <div key={index} className="masonry-grid-item">
          {item}
        </div>
      ))}
    </div>
  );
};

export default MasonryGrid;
// components/ActivityTimeline.tsx
import React, { useEffect, useState } from 'react';
import { formatDistanceToNow } from 'date-fns';
import Avatar from '@/components/Avatar';

interface Activity {
  id: number;
  type: string;
  user: {
    id: number;
    username: string;
    avatar: string;
  };
  metadata: {
    [key: string]: any;
  };
  createdAt: string;
}

interface ActivityTimelineProps {
  projectId: number;
}

const ActivityTimeline: React.FC<ActivityTimelineProps> = ({ projectId }) => {
  const [activities, setActivities] = useState<Activity[]>([]);

  useEffect(() => {
    const fetchActivities = async () => {
      try {
        const response = await fetch(`/api/projects/${projectId}/activities`);
        if (response.ok) {
          const data = await response.json();
          setActivities(data);
        } else {
          console.error('Error fetching activities:', response.statusText);
        }
      } catch (error) {
        console.error('Error fetching activities:', error);
      }
    };
    fetchActivities();
  }, [projectId]);

  const renderActivityContent = (activity: Activity) => {
    switch (activity.type) {
      case 'FILE_UPLOAD':
        return (
          <p>
            Uploaded file: <strong>{activity.metadata.fileName}</strong>
          </p>
        );
      case 'TASK_ASSIGNMENT':
        return (
          <p>
            Assigned task to <strong>{activity.metadata.assigneeName}</strong>
          </p>
        );
      case 'COMMENT':
        return <p>Commented: {activity.metadata.comment}</p>;
      default:
        return null;
    }
  };

  return (
    <div className="space-y-8">
      {activities.map((activity) => (
        <div key={activity.id} className="flex">
          <div className="flex-shrink-0">
            <Avatar src={activity.user.avatar} alt={activity.user.username} size="medium" />
          </div>
          <div className="ml-4">
            <div className="flex items-center">
              <span className="font-semibold">{activity.user.username}</span>
              <span className="ml-2 text-gray-500 text-sm">
                {formatDistanceToNow(new Date(activity.createdAt), { addSuffix: true })}
              </span>
            </div>
            {renderActivityContent(activity)}
          </div>
        </div>
      ))}
    </div>
  );
};

export default ActivityTimeline;
// components/Badge.tsx
import React from 'react';

interface BadgeProps {
  children: React.ReactNode;
  variant?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info';
  size?: 'small' | 'medium' | 'large';
  shape?: 'rounded' | 'square' | 'circle';
  className?: string;
  style?: React.CSSProperties;
  onClick?: () => void;
}

const Badge: React.FC<BadgeProps> = ({
  children,
  variant = 'primary',
  size = 'medium',
  shape = 'rounded',
  className = '',
  style,
  onClick,
}) => {
  const getVariantClasses = () => {
    switch (variant) {
      case 'primary':
        return 'bg-blue-500 text-white';
      case 'secondary':
        return 'bg-gray-500 text-white';
      case 'success':
        return 'bg-green-500 text-white';
      case 'danger':
        return 'bg-red-500 text-white';
      case 'warning':
        return 'bg-yellow-500 text-black';
      case 'info':
        return 'bg-blue-400 text-white';
      default:
        return 'bg-blue-500 text-white';
    }
  };

  const getSizeClasses = () => {
    switch (size) {
      case 'small':
        return 'px-2 py-0.5 text-xs';
      case 'medium':
        return 'px-3 py-1 text-sm';
      case 'large':
        return 'px-4 py-2 text-base';
      default:
        return 'px-3 py-1 text-sm';
    }
  };

  const getShapeClasses = () => {
    switch (shape) {
      case 'rounded':
        return 'rounded-md';
      case 'square':
        return '';
      case 'circle':
        return 'rounded-full';
      default:
        return 'rounded-md';
    }
  };

  return (
    <span
      className={`inline-flex items-center font-semibold ${getVariantClasses()} ${getSizeClasses()} ${getShapeClasses()} ${className}`}
      style={style}
      onClick={onClick}
    >
      {children}
    </span>
  );
};

export default Badge;
// components/Sidebar.tsx
import React, { useRef, useEffect, useState } from 'react';
import Link from 'next/link';
import { ChevronLeftIcon, ChevronRightIcon } from '@heroicons/react/24/solid';

interface SidebarItem {
  id: string;
  label: string;
  icon?: React.ReactNode;
  link?: string;
}

interface SidebarProps {
  items: SidebarItem[];
  activeItem: string;
  onItemClick: (itemId: string) => void;
}

const Sidebar: React.FC<SidebarProps> = ({ items, activeItem, onItemClick }) => {
  const scrollContainerRef = useRef<HTMLDivElement>(null);
  const [showLeftIndicator, setShowLeftIndicator] = useState(false);
  const [showRightIndicator, setShowRightIndicator] = useState(false);

  useEffect(() => {
    const scrollContainer = scrollContainerRef.current;
    if (scrollContainer) {
      const handleScroll = () => {
        setShowLeftIndicator(scrollContainer.scrollLeft > 0);
        setShowRightIndicator(
            scrollContainer.scrollLeft + scrollContainer.clientWidth < scrollContainer.scrollWidth
        );
      };

      scrollContainer.addEventListener('scroll', handleScroll);
      handleScroll();

      return () => {
        scrollContainer.removeEventListener('scroll', handleScroll);
      };
    }
  }, []);

  const scrollToStart = () => {
    scrollContainerRef.current?.scrollTo({ left: 0, behavior: 'smooth' });
  };

  const scrollToEnd = () => {
    scrollContainerRef.current?.scrollTo({
      left: scrollContainerRef.current.scrollWidth,
      behavior: 'smooth',
    });
  };

  const renderSidebarItem = (item: SidebarItem) => (
      <li key={item.id}>
        {item.link ? (
            <Link
                href={item.link}
                className={`flex items-center px-4 py-2 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 ${
                    activeItem === item.id ? 'bg-gray-200 dark:bg-gray-700' : ''
                }`}
            >
              {item.icon && <span className="mr-2">{item.icon}</span>}
              {item.label}
            </Link>
        ) : (
            <button
                onClick={() => onItemClick(item.id)}
                className={`flex items-center w-full px-4 py-2 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-800 ${
                    activeItem === item.id ? 'bg-gray-200 dark:bg-gray-700' : ''
                }`}
            >
              {item.icon && <span className="mr-2">{item.icon}</span>}
              {item.label}
            </button>
        )}
      </li>
  );

  return (
      <>
        <div className="hidden md:block w-64 h-full bg-white dark:bg-gray-800 border-r border-gray-200 dark:border-gray-700">
          <nav className="py-8">
            <ul className="space-y-2">{items.map(renderSidebarItem)}</ul>
          </nav>
        </div>
        <div className="md:hidden relative">
          {showLeftIndicator && (
              <button
                  className="absolute left-0 top-0 bottom-0 z-10 bg-white dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-2 focus:outline-none"
                  onClick={scrollToStart}
              >
                <ChevronLeftIcon className="w-5 h-5" />
              </button>
          )}
          <div
              ref={scrollContainerRef}
              className="overflow-x-auto whitespace-nowrap bg-white dark:bg-gray-800 border-b border-gray-200 dark:border-gray-700 hide-scrollbar"
              style={{ scrollbarWidth: 'none', msOverflowStyle: 'none' }}
          >
            <ul className="flex space-x-4 px-4 py-2">
              {items.map((item) => (
                  <li key={item.id}>
                    {item.link ? (
                        <Link
                            href={item.link}
                            className={`inline-flex items-center px-4 py-2 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 ${
                                activeItem === item.id ? 'bg-gray-200 dark:bg-gray-700' : ''
                            }`}
                        >
                          {item.icon && <span className="mr-2">{item.icon}</span>}
                          {item.label}
                        </Link>
                    ) : (
                        <button
                            onClick={() => onItemClick(item.id)}
                            className={`inline-flex items-center px-4 py-2 text-gray-600 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700 ${
                                activeItem === item.id ? 'bg-gray-200 dark:bg-gray-700' : ''
                            }`}
                        >
                          {item.icon && <span className="mr-2">{item.icon}</span>}
                          {item.label}
                        </button>
                    )}
                  </li>
              ))}
            </ul>
          </div>
          {showRightIndicator && (
              <button
                  className="absolute right-0 top-0 bottom-0 z-10 bg-white dark:bg-gray-800 text-gray-600 dark:text-gray-300 px-2 focus:outline-none"
                  onClick={scrollToEnd}
              >
                <ChevronRightIcon className="w-5 h-5" />
              </button>
          )}
        </div>
      </>
  );
};

export default Sidebar;
// components/Rating.tsx
'use client';
import React, { useState } from 'react';

interface RatingProps {
  value: number;
  onChange: (rating: number) => void;
  max?: number;
  className?: string;
  starClassName?: string;
  activeStarClassName?: string;
  inactiveStarClassName?: string;
  halfStarEnabled?: boolean;
  readOnly?: boolean;
}

const Rating: React.FC<RatingProps> = ({
  value,
  onChange,
  max = 5,
  className = '',
  starClassName = '',
  activeStarClassName = '',
  inactiveStarClassName = '',
  halfStarEnabled = false,
  readOnly = false,
}) => {
  const [hoverRating, setHoverRating] = useState<number | null>(null);

  const handleClick = (rating: number) => {
    if (!readOnly) {
      onChange(rating);
    }
  };

  const handleMouseEnter = (rating: number) => {
    if (!readOnly) {
      setHoverRating(rating);
    }
  };

  const handleMouseLeave = () => {
    if (!readOnly) {
      setHoverRating(null);
    }
  };

  const renderStars = () => {
    const stars = [];

    for (let i = 1; i <= max; i++) {
      const isActive = i <= (hoverRating || value);
      const isHalfStar = halfStarEnabled && i === Math.ceil(value) && value % 1 !== 0;

      stars.push(
        <span
          key={i}
          className={`inline-block cursor-pointer ${starClassName} ${isActive ? activeStarClassName : inactiveStarClassName
            }`}
          onClick={() => handleClick(i)}
          onMouseEnter={() => handleMouseEnter(i)}
          onMouseLeave={handleMouseLeave}
        >
          {isHalfStar ? (
            <HalfStarIcon className={activeStarClassName} />
          ) : isActive ? (
            <FullStarIcon className={activeStarClassName} />
          ) : (
            <EmptyStarIcon className={inactiveStarClassName} />
          )}
        </span>
      );
    }

    return stars;
  };

  return <div className={`inline-flex ${className}`}>{renderStars()}</div>;
};

const FullStarIcon: React.FC<{ className?: string }> = ({ className }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    className={`h-6 w-6 ${className}`}
    viewBox="0 0 20 20"
    fill="currentColor"
  >
    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
  </svg>
);

const HalfStarIcon: React.FC<{ className?: string }> = ({ className }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    className={`h-6 w-6 ${className}`}
    viewBox="0 0 20 20"
    fill="currentColor"
  >
    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292zM10 12.25a.75.75 0 01.75.75v1.5a.75.75 0 01-1.5 0v-1.5a.75.75 0 01.75-.75zM10 9a.75.75 0 01.75.75v1.5a.75.75 0 01-1.5 0v-1.5A.75.75 0 0110 9z" />
  </svg>
);

const EmptyStarIcon: React.FC<{ className?: string }> = ({ className }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    className={`h-6 w-6 ${className}`}
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"
    />
  </svg>
);

export default Rating;
// components/Table.tsx
import React from 'react';

type ColumnAccessor<T> = keyof T | ((row: T) => React.ReactNode);

interface TableColumn<T> {
  header: string;
  accessor: ColumnAccessor<T>;
  sortable?: boolean;
  className?: string;
}

interface TableProps<T> {
  columns: TableColumn<T>[];
  data: T[];
  className?: string;
  rowClassName?: string;
  onRowClick?: (row: T) => void;
  sortColumn?: keyof T;
  sortDirection?: 'asc' | 'desc';
  onSort?: (column: keyof T) => void;
}

const Table = <T,>({
  columns,
  data,
  className = '',
  rowClassName = '',
  onRowClick,
  sortColumn,
  sortDirection,
  onSort,
}: TableProps<T>) => {
  const renderCell = (row: T, accessor: ColumnAccessor<T>) => {
    if (typeof accessor === 'function') {
      return accessor(row);
    }
    return String(row[accessor]);
  };

  const handleSort = (column: keyof T) => {
    if (onSort) {
      onSort(column);
    }
  };

  return (
    <div className={`overflow-x-auto ${className}`}>
      <table className="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
        <thead className="bg-gray-50 dark:bg-gray-800">
          <tr>
            {columns && columns.length > 0 && columns.map((column) => (
              <th
                key={column.header}
                scope="col"
                className={`px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider ${
                  column.sortable ? 'cursor-pointer select-none' : ''
                } ${column.className}`}
                onClick={() => column.sortable && handleSort(column.accessor as keyof T)}
              >
                <div className="flex items-center">
                  {column.header}
                  {column.sortable && (
                    <span className="ml-2">
                      {sortColumn === column.accessor ? (
                        sortDirection === 'asc' ? (
                          <ChevronUpIcon />
                        ) : (
                          <ChevronDownIcon />
                        )
                      ) : (
                        <ChevronUpDownIcon />
                      )}
                    </span>
                  )}
                </div>
              </th>
            ))}
          </tr>
        </thead>
        <tbody className="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
          {data && data.length > 0 && data.map((row, index) => (
            <tr
              key={index}
              className={`${
                onRowClick ? 'cursor-pointer hover:bg-gray-50 dark:hover:bg-gray-600' : ''
              } ${rowClassName}`}
              onClick={() => onRowClick && onRowClick(row)}
            >
              {columns.map((column) => (
                <td
                  key={column.header}
                  className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900 dark:text-white"
                >
                  {renderCell(row, column.accessor)}
                </td>
              ))}
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
};

const ChevronUpIcon: React.FC = () => (
  <svg
    className="w-4 h-4"
    fill="currentColor"
    viewBox="0 0 20 20"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fillRule="evenodd"
      d="M14.707 12.707a1 1 0 01-1.414 0L10 9.414l-3.293 3.293a1 1 0 01-1.414-1.414l4-4a1 1 0 011.414 0l4 4a1 1 0 010 1.414z"
      clipRule="evenodd"
    />
  </svg>
);

const ChevronDownIcon: React.FC = () => (
  <svg
    className="w-4 h-4"
    fill="currentColor"
    viewBox="0 0 20 20"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fillRule="evenodd"
      d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z"
      clipRule="evenodd"
    />
  </svg>
);

const ChevronUpDownIcon: React.FC = () => (
  <svg
    className="w-4 h-4"
    fill="currentColor"
    viewBox="0 0 20 20"
    xmlns="http://www.w3.org/2000/svg"
  >
    <path
      fillRule="evenodd"
      d="M10 3a1 1 0 01.707.293l3 3a1 1 0 01-1.414 1.414L10 5.414 7.707 7.707a1 1 0 01-1.414-1.414l3-3A1 1 0 0110 3zm-3.707 9.293a1 1 0 011.414 0L10 14.586l2.293-2.293a1 1 0 011.414 1.414l-3 3a1 1 0 01-1.414 0l-3-3a1 1 0 010-1.414z"
      clipRule="evenodd"
    />
  </svg>
);

export default Table;
// components/Notification.tsx
import React from 'react';
import Button from './Button';
import { format } from 'date-fns';

interface NotificationProps {
  id: number;
  userId: number;
  message: string;
  link?: string;
  createdAt: Date;
  read: boolean;
  onMarkAsRead: (notificationId: number) => void;
  onDelete: (notificationId: number) => void;
}

const Notification: React.FC<NotificationProps> = ({
  id,
  message,
  link,
  createdAt,
  read,
  onMarkAsRead,
  onDelete,
}) => {
  const handleMarkAsRead = () => {
    onMarkAsRead(id);
  };

  const handleDelete = () => {
    onDelete(id);
  };

  return (
    <div className={`bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-md p-4 mb-4 ${read ? 'opacity-50' : ''}`}>
      <div className="flex justify-between items-center">
        <div>
          <p className="text-gray-600 dark:text-gray-400">{message}</p>
          {link && (
            <a
              href={link}
              target="_blank"
              rel="noopener noreferrer"
              className="text-blue-500 dark:text-blue-400 hover:underline mt-1"
            >
              View Details
            </a>
          )}
        </div>
        {!read && (
          <Button variant="secondary" size="small" onClick={handleMarkAsRead}>
            Mark as Read
          </Button>
        )}
      </div>
      <div className="flex justify-between items-center mt-4">
        <p className="text-sm text-gray-500 dark:text-gray-400">
          {format(createdAt, 'MMM d, yyyy h:mm a')}
        </p>
        <Button variant="danger" size="small" onClick={handleDelete}>
          Delete
        </Button>
      </div>
    </div>
  );
};

export default Notification;
  // components/Button.tsx
import React from 'react';
import Spinner from './Spinner';
import CheckCircleIcon from './icons/CheckCircleIcon';


interface ButtonProps {
  children?: React.ReactNode;
  type?: 'button' | 'submit' | 'reset';
  variant?: 'primary' | 'secondary' | 'danger' | 'dropdown' | 'outline-primary' | 'outline-secondary' | 'outline-danger';
  size?: 'small' | 'medium' | 'large' | 'dropdown';
  onClick?: () => void;
  disabled?: boolean;
  className?: string;
  isLoading?: boolean;
  loadingText?: string;
}

const Button: React.FC<ButtonProps> = ({
  children,
  type = 'button',
  variant = 'primary',
  size = 'medium',
  onClick,
  disabled = false,
  className = '',
  isLoading = false,
  loadingText = 'Loading...',
}) => {
  const getVariantClasses = () => {
    let defaultClasses = '';
    let customClasses = '';
    switch (variant) {
      case 'primary':
        defaultClasses = 'bg-blue-400 dark:bg-blue-600 text-white hover:bg-blue-700 dark:hover:bg-blue-600 focus:ring-blue-500 dark:focus:ring-blue-600';
        customClasses = className.split(' ').reduce((acc, cls) => {
          const type = cls.split('-')[0];
          if (defaultClasses.includes(type)) {
            return acc.replace(new RegExp(`${type}-\\w+`), cls);
          }
          return acc + ' ' + cls;
        }, defaultClasses);
        return customClasses;
      case 'secondary':
        defaultClasses =  'bg-gray-200 dark:bg-gray-700 text-gray-700 dark:text-gray-200 hover:bg-gray-300 dark:hover:bg-gray-500 focus:ring-gray-400 dark:focus:ring-gray-500';
        customClasses = className.split(' ').reduce((acc, cls) => {
          const type = cls.split('-')[0];
          if (defaultClasses.includes(type)) {
            return acc.replace(new RegExp(`${type}-\\w+`), cls);
          }
          return acc + ' ' + cls;
        }, defaultClasses);
        return customClasses;
      case 'danger':
        defaultClasses =  'bg-red-600 dark:bg-red-500 text-white hover:bg-red-700 dark:hover:bg-red-600 focus:ring-red-500 dark:focus:ring-red-600';
        customClasses = className.split(' ').reduce((acc, cls) => {
          const type = cls.split('-')[0];
          if (defaultClasses.includes(type)) {
            return acc.replace(new RegExp(`${type}-\\w+`), cls);
          }
          return acc + ' ' + cls;
        }, defaultClasses);
        return customClasses;
      case 'dropdown':
        defaultClasses =  'inline-flex justify-center w-full rounded-md px-4 py-2 bg-white dark:bg-gray-800 text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 dark:focus:ring-offset-gray-800 dark:focus:ring-blue-600';
        customClasses = className.split(' ').reduce((acc, cls) => {
          const type = cls.split('-')[0];
          if (defaultClasses.includes(type)) {
            return acc.replace(new RegExp(`${type}-\\w+`), cls);
          }
          return acc + ' ' + cls;
        }, defaultClasses);
        return customClasses;
      case 'outline-primary':
        defaultClasses = 'bg-transparent border border-blue-600 dark:border-blue-500 text-blue-600 dark:text-blue-500 hover:bg-blue-600 hover:text-white dark:hover:bg-blue-500 dark:hover:text-white focus:ring-blue-500 dark:focus:ring-blue-600';
        customClasses = className.split(' ').reduce((acc, cls) => {
          const type = cls.split('-')[0];
          if (defaultClasses.includes(type)) {
            return acc.replace(new RegExp(`${type}-\\w+`), cls);
          }
          return acc + ' ' + cls;
        }, defaultClasses);
        return customClasses;
      case 'outline-secondary':
        defaultClasses = 'bg-transparent border border-gray-500 dark:border-gray-400 text-gray-500 dark:text-gray-400 hover:bg-gray-500 hover:text-white dark:hover:bg-gray-400 dark:hover:text-white focus:ring-gray-400 dark:focus:ring-gray-500';
        customClasses = className.split(' ').reduce((acc, cls) => {
          const type = cls.split('-')[0];
          if (defaultClasses.includes(type)) {
            return acc.replace(new RegExp(`${type}-\\w+`), cls);
          }
          return acc + ' ' + cls;
        }, defaultClasses);
        return customClasses;
      case 'outline-danger':
        defaultClasses = 'bg-transparent border border-red-600 dark:border-red-500 text-red-600 dark:text-red-500 hover:bg-red-600 hover:text-white dark:hover:bg-red-500 dark:hover:text-white focus:ring-red-500 dark:focus:ring-red-600';
        customClasses = className.split(' ').reduce((acc, cls) => {
          const type = cls.split('-')[0];
          if (defaultClasses.includes(type)) {
            return acc.replace(new RegExp(`${type}-\\w+`), cls);
          }
          return acc + ' ' + cls;
        }, defaultClasses);
        return customClasses;
      default:
        return '';
    }
  };

  const getSizeClasses = () => {
    switch (size) {
      case 'small':
        return 'px-2 py-1 text-sm';
      case 'medium':
        return 'px-4 py-2 text-base';
      case 'large':
        return 'px-6 py-3 text-lg';
      case 'dropdown':
        return 'py-2 text-base';
      default:
        return '';
    }
  };

  const buttonClasses = `rounded-md focus:outline-none focus:ring-2 focus:ring-offset-2 dark:focus:ring-offset-gray-800 ${getVariantClasses()} ${getSizeClasses()} ${
    disabled || isLoading ? 'opacity-50 cursor-not-allowed' : ''
  } ${className}`;

  return (
    <button type={type} onClick={onClick} disabled={disabled || isLoading} className={buttonClasses}>
      {isLoading ? (
        <>
          <Spinner size="small" className="mr-2" />
          {loadingText}
        </>
      ) : (
        children
      )}
    </button>
  );
};

export default Button;
// components/Modal.tsx
import React, { useEffect, useRef } from 'react';
import { motion } from 'framer-motion';

interface ModalProps {
  isOpen: boolean;
  onClose: () => void;
  title: string;
  children: React.ReactNode;
  className?: string;
  overlayClassName?: string;
  closeOnOverlayClick?: boolean;
}

const Modal: React.FC<ModalProps> = ({
  isOpen,
  onClose,
  title,
  children,
  className = '',
  overlayClassName = '',
  closeOnOverlayClick = true,
}) => {
  const modalRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const handleKeyDown = (event: KeyboardEvent) => {
      if (event.key === 'Escape') {
        onClose();
      }
    };

    if (isOpen) {
      document.addEventListener('keydown', handleKeyDown);
    }

    return () => {
      document.removeEventListener('keydown', handleKeyDown);
    };
  }, [isOpen, onClose]);

  const handleOverlayClick = (event: React.MouseEvent<HTMLDivElement>) => {
    if (closeOnOverlayClick && event.target === modalRef.current) {
      onClose();
    }
  };

  if (!isOpen) {
    return null;
  }

  return (
    <motion.div
      ref={modalRef}
      className={`fixed inset-0 z-50 flex items-center justify-center p-4 bg-black bg-opacity-50 ${overlayClassName}`}
      onClick={handleOverlayClick}
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      exit={{ opacity: 0 }}
      transition={{ duration: 0.2 }}
    >
      <motion.div
        className={`bg-white dark:bg-gray-800 rounded-lg shadow-lg w-full max-w-md ${className}`}
        initial={{ scale: 0.8 }}
        animate={{ scale: 1 }}
        exit={{ scale: 0.8 }}
        transition={{ duration: 0.2 }}
      >
        <div className="flex justify-between items-center px-6 py-4 border-b border-gray-200 dark:border-gray-700">
          <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">{title}</h2>
          <button
            onClick={onClose}
            className="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-200 focus:outline-none"
          >
            <svg
              xmlns="http://www.w3.org/2000/svg"
              className="h-6 w-6"
              fill="none"
              viewBox="0 0 24 24"
              stroke="currentColor"
            >
              <path
                strokeLinecap="round"
                strokeLinejoin="round"
                strokeWidth={2}
                d="M6 18L18 6M6 6l12 12"
              />
            </svg>
          </button>
        </div>
        <div className="px-6 py-4">{children}</div>
      </motion.div>
    </motion.div>
  );
};

export default Modal;
// components/Toast.tsx
import React, { useEffect, useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';

interface ToastProps {
  message: string;
  duration?: number;
  onClose: () => void;
  variant?: 'success' | 'error' | 'warning' | 'info';
  position?: 'top-left' | 'top-center' | 'top-right' | 'bottom-left' | 'bottom-center' | 'bottom-right';
  className?: string;
  icon?: React.ReactNode;
  closeButton?: boolean;
}

const Toast: React.FC<ToastProps> = ({
  message,
  duration = 3000,
  onClose,
  variant = 'info',
  position = 'bottom-right',
  className = '',
  icon,
  closeButton = true,
}) => {
  const [isVisible, setIsVisible] = useState(true);

  useEffect(() => {
    const timer = setTimeout(() => {
      setIsVisible(false);
      onClose();
    }, duration);

    return () => {
      clearTimeout(timer);
    };
  }, [duration, onClose]);

  const getVariantStyles = () => {
    switch (variant) {
      case 'success':
        return 'bg-green-500 text-white';
      case 'error':
        return 'bg-red-500 text-white';
      case 'warning':
        return 'bg-yellow-500 text-black';
      case 'info':
      default:
        return 'bg-blue-500 text-white';
    }
  };

  const getPositionStyles = () => {
    switch (position) {
      case 'top-left':
        return 'top-4 left-4';
      case 'top-center':
        return 'top-4 left-1/2 transform -translate-x-1/2';
      case 'top-right':
        return 'top-4 right-4';
      case 'bottom-left':
        return 'bottom-4 left-4';
      case 'bottom-center':
        return 'bottom-4 left-1/2 transform -translate-x-1/2';
      case 'bottom-right':
      default:
        return 'bottom-4 right-4';
    }
  };

  return (
    <AnimatePresence>
      {isVisible && (
        <motion.div
          initial={{ opacity: 0, y: 50, scale: 0.3 }}
          animate={{ opacity: 1, y: 0, scale: 1 }}
          exit={{ opacity: 0, scale: 0.5, transition: { duration: 0.2 } }}
          className={`fixed z-50 rounded-md shadow-lg ${getVariantStyles()} ${getPositionStyles()} ${className}`}
        >
          <div className="flex items-center px-4 py-3">
            {icon && <div className="mr-3">{icon}</div>}
            <div className="text-sm font-medium">{message}</div>
            {closeButton && (
              <button
                onClick={() => setIsVisible(false)}
                className="ml-auto text-white hover:text-gray-100 focus:outline-none"
              >
                <XIcon />
              </button>
            )}
          </div>
        </motion.div>
      )}
    </AnimatePresence>
  );
};

const XIcon: React.FC = () => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    className="h-5 w-5"
    viewBox="0 0 20 20"
    fill="currentColor"
  >
    <path
      fillRule="evenodd"
      d="M4.293 4.293a1 1 0 011.414 0L10 8.586l4.293-4.293a1 1 0 111.414 1.414L11.414 10l4.293 4.293a1 1 0 01-1.414 1.414L10 11.414l-4.293 4.293a1 1 0 01-1.414-1.414L8.586 10 4.293 5.707a1 1 0 010-1.414z"
      clipRule="evenodd"
    />
  </svg>
);

export default Toast;
// components/Checkbox.tsx
import React from 'react';

interface CheckboxProps {
  label: string;
  checked: boolean;
  onChange: (checked: boolean) => void;
  className?: string;
  disabled?: boolean;
}

const Checkbox: React.FC<CheckboxProps> = ({
  label,
  checked,
  onChange,
  className = '',
  disabled = false,
}) => {
  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    onChange(event.target.checked);
  };

  return (
    <label className={`inline-flex items-center ${className}`}>
      <input
        type="checkbox"
        className={`form-checkbox h-5 w-5 text-blue-600 transition duration-150 ease-in-out ${
          disabled ? 'opacity-50 cursor-not-allowed' : ''
        }`}
        checked={checked}
        onChange={handleChange}
        disabled={disabled}
      />
      <span className={`ml-2 text-gray-700 dark:text-gray-300 ${disabled ? 'opacity-50' : ''}`}>
        {label}
      </span>
    </label>
  );
};

export default Checkbox;
// components/Stepper.tsx
import React from 'react';

interface Step {
  id: string;
  title: string;
  description?: string;
  completed?: boolean;
}

interface StepperProps {
  steps: Step[];
  currentStep: string;
  onStepClick?: (stepId: string) => void;
  className?: string;
  stepClassName?: string;
  activeStepClassName?: string;
  completedStepClassName?: string;
  stepTitleClassName?: string;
  stepDescriptionClassName?: string;
}

const Stepper: React.FC<StepperProps> = ({
  steps,
  currentStep,
  onStepClick,
  className = '',
  stepClassName = '',
  activeStepClassName = '',
  completedStepClassName = '',
  stepTitleClassName = '',
  stepDescriptionClassName = '',
}) => {
  const getStepClass = (step: Step) => {
    if (step.id === currentStep) {
      return activeStepClassName;
    } else if (step.completed) {
      return completedStepClassName;
    }
    return stepClassName;
  };

  const handleStepClick = (stepId: string) => {
    if (onStepClick) {
      onStepClick(stepId);
    }
  };

  return (
    <div className={`stepper ${className}`}>
      <div className="stepper-header">
        {steps.map((step, index) => (
          <div
            key={step.id}
            className={`stepper-step ${getStepClass(step)}`}
            onClick={() => handleStepClick(step.id)}
          >
            <div className="stepper-icon">
              {step.completed ? (
                <CheckIcon className="text-green-500" />
              ) : (
                <span className="stepper-number">{index + 1}</span>
              )}
            </div>
            <div className="stepper-content">
              <h3 className={`stepper-title ${stepTitleClassName}`}>{step.title}</h3>
              {step.description && (
                <p className={`stepper-description ${stepDescriptionClassName}`}>
                  {step.description}
                </p>
              )}
            </div>
          </div>
        ))}
      </div>
    </div>
  );
};

const CheckIcon: React.FC<{ className?: string }> = ({ className }) => (
  <svg
    xmlns="http://www.w3.org/2000/svg"
    className={`h-6 w-6 ${className}`}
    fill="none"
    viewBox="0 0 24 24"
    stroke="currentColor"
  >
    <path
      strokeLinecap="round"
      strokeLinejoin="round"
      strokeWidth={2}
      d="M5 13l4 4L19 7"
    />
  </svg>
);

export default Stepper;
// components/EmptyState.tsx
import React from 'react';

interface EmptyStateProps {
  title: string;
  description: string;
  icon?: React.ReactNode;
  action?: React.ReactNode;
  className?: string;
}

const EmptyState: React.FC<EmptyStateProps> = ({
  title,
  description,
  icon,
  action,
  className = '',
}) => {
  return (
    <div className={`flex flex-col items-center justify-center pt-12 pb-4 ${className}`}>
      {icon && <div className="text-4xl mb-4">{icon}</div>}
      <h2 className="text-2xl font-semibold text-gray-800 dark:text-gray-200 mb-2">{title}</h2>
      <p className="text-gray-600 dark:text-gray-400 text-center mb-6">{description}</p>
      {action && <div>{action}</div>}
    </div>
  );
};

export default EmptyState;
// components/Spinner.tsx
import React from 'react';

interface SpinnerProps {
  size?: 'small' | 'medium' | 'large';
  variant?: 'primary' | 'secondary' | 'success' | 'danger' | 'warning' | 'info';
  className?: string;
  style?: React.CSSProperties;
}

const Spinner: React.FC<SpinnerProps> = ({
  size = 'medium',
  variant = 'primary',
  className = '',
  style,
}) => {
  const getSizeClasses = () => {
    switch (size) {
      case 'small':
        return 'w-4 h-4';
      case 'medium':
        return 'w-8 h-8';
      case 'large':
        return 'w-12 h-12';
      default:
        return 'w-8 h-8';
    }
  };

  const getVariantClasses = () => {
    switch (variant) {
      case 'primary':
        return 'text-blue-500';
      case 'secondary':
        return 'text-gray-500';
      case 'success':
        return 'text-green-500';
      case 'danger':
        return 'text-red-500';
      case 'warning':
        return 'text-yellow-500';
      case 'info':
        return 'text-blue-500';
      default:
        return 'text-blue-500';
    }
  };

  return (
    <div className={`inline-block ${className}`} style={style}>
      <svg
        className={`animate-spin ${getSizeClasses()} ${getVariantClasses()}`}
        xmlns="http://www.w3.org/2000/svg"
        fill="none"
        viewBox="0 0 24 24"
      >
        <circle
          className="opacity-25"
          cx="12"
          cy="12"
          r="10"
          stroke="currentColor"
          strokeWidth="4"
        ></circle>
        <path
          className="opacity-75"
          fill="currentColor"
          d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"
        ></path>
      </svg>
    </div>
  );
};

export default Spinner;
import React from 'react';
import { File, User, Project, Tag } from '@/lib/prisma';
import Card from '@/components/Card';
import Avatar from '@/components/Avatar';
import Badge from '@/components/Badge';

interface FileCardProps {
  file: File;
  onClick: () => void;
  uploadedBy: User;
  project?: Project;
  tags: Tag[];
}

const FileCard: React.FC<FileCardProps> = ({ file, onClick, uploadedBy, project, tags }) => {
  return (
    <Card onClick={onClick}>
      <div className="flex items-center">
        <Avatar src={uploadedBy.avatar} alt={uploadedBy.username} size="small" />
        <div className="ml-2">
          <h3 className="font-semibold text-gray-800 dark:text-gray-200">{uploadedBy.username}</h3>
          <p className="text-sm text-gray-600 dark:text-gray-400">{new Date(file.createdAt).toLocaleDateString()}</p>
        </div>
      </div>
      <div className="mt-4">
        <h2 className="text-xl font-semibold text-gray-800 dark:text-gray-200">{file.name}</h2>
        <p className="mt-2 text-gray-600 dark:text-gray-400">{file.description}</p>
      </div>
      {project && (
        <div className="mt-4">
          <p className="text-sm text-gray-600 dark:text-gray-400">Project: {project.name}</p>
        </div>
      )}
      <div className="mt-4 flex flex-wrap">
        {tags.map((tag) => (
          <Badge key={tag.id} variant="primary" className="mr-2 mb-2">
            {tag.name}
          </Badge>
        ))}
      </div>
    </Card>
  );
};

export default FileCard;
import React from 'react';
import Modal from '@/components/Modal';
import { Space } from '@/lib/prisma';

interface SpacePreviewModalProps {
    isOpen: boolean;
    onClose: () => void;
    space: Space | null;
}

const SpacePreviewModal: React.FC<SpacePreviewModalProps> = ({ isOpen, onClose, space }) => {
    if (!space) {
        return null;
    }

    return (
        <Modal isOpen={isOpen} onClose={onClose} title={space.title}>
            <p className="text-gray-600 mb-4">{space.description}</p>
            {/* Add more preview content as needed */}
        </Modal>
    );
};

export default SpacePreviewModal;
// components/Select.tsx
import React from 'react';

interface Option {
  value: string;
  label: string;
}

interface SelectProps {
  options: Option[] | string[] | number[] | boolean[] | object[] | any[] | undefined;
  value: string[];
  onChange: (value: string[]) => void;
  label?: string;
  placeholder?: string;
  disabled?: boolean;
  error?: string;
  className?: string;
  id?: string;
  isMulti?: boolean;
  key?: string;
}

const Select: React.FC<SelectProps> = ({
  options,
  value,
  onChange,
  label,
  placeholder = 'Select options',
  disabled = false,
  error = '',
  className = '',
  id,
  isMulti = false,
  key,
}) => {
  const handleChange = (event: React.ChangeEvent<HTMLSelectElement>) => {
    const selectedOptions = Array.from(event.target.selectedOptions, (option) => option.value);
    onChange(selectedOptions);
  };

  return (
    <div className={`relative ${className}`}>
      {label && (
        <label className={`block text-sm font-medium mb-1 ${
          error ? 'text-red-500 dark:text-red-400' : 'text-gray-700 dark:text-gray-300'
        }`}>
          {label}
        </label>
      )}
      <select
        id={id}
        key={key}
        multiple={isMulti}
        value={value}
        onChange={handleChange}
        disabled={disabled}
        className={`block w-full px-4 py-2 pr-8 leading-tight rounded-md shadow-sm focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-gray-300 dark:focus:ring-blue-600 dark:focus:border-blue-600 ${
          error
            ? 'border-red-500 dark:border-red-400'
            : 'border-gray-300 dark:border-gray-600'
        } ${disabled ? 'bg-gray-100 dark:bg-gray-700' : 'bg-white dark:bg-gray-800'}`}
        style={{appearance:"none"}}
      >
        {placeholder && (
          <option value="" disabled>
            {placeholder}
          </option>
        )}
        {options?.map((option) => (
          <option key={option.value} value={option.value}>
            {option.label}
          </option>
        ))}
      </select>
      {error && <p className="mt-1 text-sm text-red-500 dark:text-red-400">{error}</p>}
      <div className="absolute inset-y-0 right-0 flex items-center px-2 pointer-events-none">
        <svg
          className="w-5 h-5 text-gray-400 dark:text-gray-500"
          xmlns="http://www.w3.org/2000/svg"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fillRule="evenodd"
            d="M6.293 6.707a1 1 0 0 1 1.414 0L10 9.414l2.293-2.707a1 1 0 1 1 1.414 1.414l-3 3a1 1 0 0 1-1.414 0l-3-3a1 1 0 0 1 0-1.414z"
            clipRule="evenodd"
          />
        </svg>
      </div>
    </div>
  );
};

export default Select;
// components/Textarea.tsx
import React from 'react';

interface TextareaProps {
  value: string;
  onChange: (value: string) => void;
  placeholder?: string;
  rows?: number;
  className?: string;
  labelClassName?: string;
  label?: string;
  error?: string;
  required?: boolean;
  id?: string;
}

const Textarea: React.FC<TextareaProps> = ({
  value,
  onChange,
  placeholder = '',
  rows = 3,
  className = '',
  labelClassName = '',
  label = '',
  error = '',
  required = false,
  id,
}) => {
  const handleChange = (event: React.ChangeEvent<HTMLTextAreaElement>) => {
    onChange(event.target.value);
  };

  return (
    <div className={`mb-4 ${className}`}>
      {label && (
        <label className={`block text-sm font-medium mb-1 ${labelClassName}`}>
          {label}
          {required && <span className="text-red-500">*</span>}
        </label>
      )}
      <textarea
        id={id}
        value={value}
        onChange={handleChange}
        placeholder={placeholder}
        rows={rows}
        className={`w-full px-3 py-2 text-gray-700 border rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent ${
          error ? 'border-red-500' : 'border-gray-300'
        }`}
        required={required}
      ></textarea>
      {error && <p className="mt-1 text-sm text-red-500">{error}</p>}
    </div>
  );
};

export default Textarea;
// components/Input.tsx
import React from 'react';

interface InputProps {
  label?: string;
  type?: string;
  name: string;
  value: string;
  id: string;
  onChange: (event: React.ChangeEvent<HTMLInputElement>) => void;
  required?: boolean;
  className?: string;
  placeholder?: string;
  error?: string;
  disabled?: boolean;
  autoComplete?: string;
}

const Input: React.FC<InputProps> = ({
  label,
  type = 'text',
  name,
  value,
  id,
  onChange,
  className = '',
  required = false,
  placeholder = '',
  error = '',
  disabled = false,
  autoComplete = 'off',
}) => {
  return (
    <div className="mb-4">
      <label
        htmlFor={name}
        className={`block text-sm font-medium mb-1 ${
          error ? 'text-red-500 dark:text-red-400' : 'text-gray-700 dark:text-gray-300'
        }`}
      >
        {label}
      </label>
      <input
        type={type}
        id={id}
        name={name}
        value={value}
        onChange={onChange}
        required={required}
        placeholder={placeholder}
        disabled={disabled}
        autoComplete={autoComplete}
        className={`w-full px-3 py-2 border rounded-md shadow-sm bg-gray-200 focus:outline-none focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-800 dark:text-gray-100 dark:focus:ring-blue-600 dark:focus:border-blue-600 ${
          error
            ? 'border-red-500 dark:border-red-400'
            : 'border-gray-300 dark:border-gray-700'
        } ${className}`}
      />
      {error && <p className="mt-1 text-sm text-red-500 dark:text-red-400">{error}</p>}
    </div>
  );
};

export default Input;
// components/ActivityFeed.tsx
import React, { useState, useEffect } from 'react';
import { Activity } from '@/lib/prisma';
import { formatDistanceToNow } from 'date-fns';
import Avatar from './Avatar';

interface ActivityFeedProps {
  projectId: number;
}

const ActivityFeed: React.FC<ActivityFeedProps> = ({ projectId }) => {
  const [activities, setActivities] = useState<Activity[]>([]);
  const [page, setPage] = useState(1);
  const [hasMore, setHasMore] = useState(true);

  useEffect(() => {
    const fetchActivities = async () => {
      try {
        const response = await fetch(`/api/projects/${projectId}/activities?page=${page}`);
        if (response.ok) {
          const data = await response.json();
          setActivities((prevActivities) => [...prevActivities, ...data.activities]);
          setHasMore(data.hasMore);
        } else {
          console.error('Error fetching activities:', response.statusText);
        }
      } catch (error) {
        console.error('Error fetching activities:', error);
      }
    };

    fetchActivities();
  }, [projectId, page]);

  const loadMore = () => {
    setPage((prevPage) => prevPage + 1);
  };

  const renderActivity = (activity: Activity) => {
    switch (activity.type) {
      case 'FILE_UPLOAD':
        return (
          <div className="flex items-center">
            <Avatar src={activity.user.avatar || ''} size="small" />
            <span className="ml-2">
              {activity.user.username} uploaded a file: {activity.metadata?.fileName}
            </span>
          </div>
        );
      case 'TASK_ASSIGNMENT':
        return (
          <div className="flex items-center">
            <Avatar src={activity.user.avatar || ''} size="small" />
            <span className="ml-2">
              {activity.user.username} assigned a task to {activity.metadata.assigneeName}
            </span>
          </div>
        );
      case 'COMMENT':
        return (
          <div className="flex items-center">
            <Avatar src={activity.user.avatar} size="small" />
            <span className="ml-2">
              {activity.user.username} commented: {activity.metadata.comment}
            </span>
          </div>
        );
      default:
        return null;
    }
  };

  return (
    <div className="bg-white shadow rounded-lg p-4">
      <h2 className="text-xl font-semibold mb-4">Activity Feed</h2>
      {activities.length === 0 ? (
        <p>No activities found.</p>
      ) : (
        <ul className="space-y-4">
          {activities.map((activity) => (
            <li key={activity.id}>
              {renderActivity(activity)}
              <p className="text-sm text-gray-500 mt-1">
                {formatDistanceToNow(new Date(activity.createdAt))} ago
              </p>
            </li>
          ))}
        </ul>
      )}
      {hasMore && (
        <button
          className="mt-4 px-4 py-2 bg-blue-500 text-white rounded-md hover:bg-blue-600"
          onClick={loadMore}
        >
          Load More
        </button>
      )}
    </div>
  );
};

export default ActivityFeed;
// components/Skeleton.tsx
import React from 'react';

interface SkeletonProps {
  variant?: 'text' | 'rectangular' | 'circular';
  width?: string;
  height?: string;
  className?: string;
  style?: React.CSSProperties;
  animation?: 'pulse' | 'wave';
}

const Skeleton: React.FC<SkeletonProps> = ({
  variant = 'text',
  width = '100%',
  height = '1rem',
  className = '',
  style,
  animation = 'pulse',
}) => {
  const getVariantClasses = () => {
    switch (variant) {
      case 'text':
        return 'skeleton-text';
      case 'rectangular':
        return 'skeleton-rectangular';
      case 'circular':
        return 'skeleton-circular';
      default:
        return 'skeleton-text';
    }
  };

  const getAnimationClasses = () => {
    switch (animation) {
      case 'pulse':
        return 'skeleton-pulse';
      case 'wave':
        return 'skeleton-wave';
      default:
        return 'skeleton-pulse';
    }
  };

  return (
    <div
      className={`skeleton ${getVariantClasses()} ${getAnimationClasses()} ${className}`}
      style={{ width, height, ...style }}
    ></div>
  );
};

export default Skeleton;
// components/Carousel.tsx
'use client';
import React, { useState, useEffect, useRef } from 'react';

interface CarouselProps {
    items?: React.ReactElement[];
    autoplay?: boolean;
    interval?: number;
    controls?: boolean;
    indicators?: boolean;
    pauseOnHover?: boolean;
    onSlideChange?: (currentSlide: number) => void;
    className?: string;
    style?: React.CSSProperties;
    emptyState?: React.ReactNode;
}

const Carousel: React.FC<CarouselProps> = ({
                                               items = [],
                                               autoplay = false,
                                               interval = 5000,
                                               controls = true,
                                               indicators = true,
                                               pauseOnHover = true,
                                               onSlideChange,
                                               className = '',
                                               style= {},
                                               emptyState = null,
                                           }) => {
  const [activeIndex, setActiveIndex] = useState(0);
  const [isPlaying, setIsPlaying] = useState(autoplay);
  const carouselRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    let timer: NodeJS.Timeout;
    const startAutoplay = () => {
      timer = setInterval(() => {
        goToNextSlide();
      }, interval);
    };
    const stopAutoplay = () => {
      clearInterval(timer);
    };

    if (isPlaying && items.length > 1) {
      startAutoplay();
    }

    return () => {
      stopAutoplay();
    };
  }, [isPlaying, interval, items]);

  const goToPrevSlide = () => {
    setActiveIndex((prevIndex) => (prevIndex === 0 ? items.length - 1 : prevIndex - 1));
  };

  const goToNextSlide = () => {
    setActiveIndex((prevIndex) => (prevIndex === items.length - 1 ? 0 : prevIndex + 1));
  };

  const goToSlide = (index: number) => {
    setActiveIndex(index);
  };

  const handleMouseEnter = () => {
    if (pauseOnHover) {
      setIsPlaying(false);
    }
  };

  const handleMouseLeave = () => {
    if (pauseOnHover) {
      setIsPlaying(true);
    }
  };

  useEffect(() => {
    if (onSlideChange) {
      onSlideChange(activeIndex);
    }
  }, [activeIndex, onSlideChange]);

  if (items.length === 0) {
    return emptyState ? <div className={className}>{emptyState}</div> : null;
  }

  return (
      <div
          ref={carouselRef}
          className={`carousel relative ${className}`}
          style={style}
          onMouseEnter={handleMouseEnter}
          onMouseLeave={handleMouseLeave}
      >
          <div className="carousel-inner relative w-full overflow-hidden">
          <div className="carousel-items flex transition-transform duration-500 ease-in-out"
          style={{ transform: `translateX(-${activeIndex * 100}%)` }}
        >
          {items.map((item, index) => (
            <div key={index} className="carousel-item flex-shrink-0 w-full">
              {item}
            </div>
          ))}
        </div>
      </div>
          {controls && items.length > 1 && (
              <>
                  <button
                      className="carousel-control-prev absolute top-1/2 left-0 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-r-md focus:outline-none"
                      onClick={goToPrevSlide}
                  >
                      <ChevronLeftIcon className="w-6 h-6"/>
                  </button>
                  <button
                      className="carousel-control-next absolute top-1/2 right-0 transform -translate-y-1/2 bg-black bg-opacity-50 text-white p-2 rounded-l-md focus:outline-none"
                      onClick={goToNextSlide}
                  >
                      <ChevronRightIcon className="w-6 h-6"/>
                  </button>
              </>
          )}
          {indicators && items.length > 1 && (
              <div className="carousel-indicators absolute bottom-4 left-1/2 transform -translate-x-1/2 flex space-x-2">
                  {items.map((_, index) => (
                      <button
                          key={index}
                          className={`carousel-indicator w-3 h-3 rounded-full bg-white bg-opacity-50 focus:outline-none ${
                              index === activeIndex ? 'bg-opacity-100' : ''
                          }`}
                          onClick={() => goToSlide(index)}
                      ></button>
                  ))}
              </div>
          )}
      </div>
  );
};

const ChevronLeftIcon: React.FC<{ className?: string }> = ({className}) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        className={className}
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
    >
        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7"/>
    </svg>
);

const ChevronRightIcon: React.FC<{ className?: string }> = ({className}) => (
    <svg
        xmlns="http://www.w3.org/2000/svg"
        className={className}
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
    >
      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
    </svg>
);

export default Carousel;
